/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  'InstrumentsService/BondBy': {
    /** Метод получения облигации по её идентификатору. */
    post: operations['InstrumentsService_BondBy'];
  };
  'InstrumentsService/Bonds': {
    /** Метод получения списка облигаций. */
    post: operations['InstrumentsService_Bonds'];
  };
  'InstrumentsService/Currencies': {
    /** Метод получения списка валют. */
    post: operations['InstrumentsService_Currencies'];
  };
  'InstrumentsService/CurrencyBy': {
    /** Метод получения валюты по её идентификатору. */
    post: operations['InstrumentsService_CurrencyBy'];
  };
  'InstrumentsService/EditFavorites': {
    /** Метод редактирования списка избранных инструментов. */
    post: operations['InstrumentsService_EditFavorites'];
  };
  'InstrumentsService/EtfBy': {
    /** Метод получения инвестиционного фонда по его идентификатору. */
    post: operations['InstrumentsService_EtfBy'];
  };
  'InstrumentsService/Etfs': {
    /** Метод получения списка инвестиционных фондов. */
    post: operations['InstrumentsService_Etfs'];
  };
  'InstrumentsService/FindInstrument': {
    /** Метод поиска инструмента. */
    post: operations['InstrumentsService_FindInstrument'];
  };
  'InstrumentsService/FutureBy': {
    /** Метод получения фьючерса по его идентификатору. */
    post: operations['InstrumentsService_FutureBy'];
  };
  'InstrumentsService/Futures': {
    /** Метод получения списка фьючерсов. */
    post: operations['InstrumentsService_Futures'];
  };
  'InstrumentsService/GetAccruedInterests': {
    /** Метод получения накопленного купонного дохода по облигации. */
    post: operations['InstrumentsService_GetAccruedInterests'];
  };
  'InstrumentsService/GetAssetBy': {
    /** Метод получения актива по его идентификатору. */
    post: operations['InstrumentsService_GetAssetBy'];
  };
  'InstrumentsService/GetAssets': {
    /** Метод получения списка активов. */
    post: operations['InstrumentsService_GetAssets'];
  };
  'InstrumentsService/GetBondCoupons': {
    /** Метод получения графика выплат купонов по облигации. */
    post: operations['InstrumentsService_GetBondCoupons'];
  };
  'InstrumentsService/GetBrandBy': {
    /** Метод получения бренда по его идентификатору. */
    post: operations['InstrumentsService_GetBrandBy'];
  };
  'InstrumentsService/GetBrands': {
    /** Метод получения списка брендов. */
    post: operations['InstrumentsService_GetBrands'];
  };
  'InstrumentsService/GetCountries': {
    /** Метод получения списка стран. */
    post: operations['InstrumentsService_GetCountries'];
  };
  'InstrumentsService/GetDividends': {
    /** Метод для получения событий выплаты дивидендов по инструменту. */
    post: operations['InstrumentsService_GetDividends'];
  };
  'InstrumentsService/GetFavorites': {
    /** Метод получения списка избранных инструментов. */
    post: operations['InstrumentsService_GetFavorites'];
  };
  'InstrumentsService/GetFuturesMargin': {
    /** Метод получения размера гарантийного обеспечения по фьючерсам. */
    post: operations['InstrumentsService_GetFuturesMargin'];
  };
  'InstrumentsService/GetInstrumentBy': {
    /** Метод получения основной информации об инструменте. */
    post: operations['InstrumentsService_GetInstrumentBy'];
  };
  'InstrumentsService/OptionBy': {
    /** Метод получения опциона по его идентификатору. */
    post: operations['InstrumentsService_OptionBy'];
  };
  'InstrumentsService/Options': {
    /** Deprecated Метод получения списка опционов. */
    post: operations['InstrumentsService_Options'];
  };
  'InstrumentsService/OptionsBy': {
    /** Метод получения списка опционов. */
    post: operations['InstrumentsService_OptionsBy'];
  };
  'InstrumentsService/ShareBy': {
    /** Метод получения акции по её идентификатору. */
    post: operations['InstrumentsService_ShareBy'];
  };
  'InstrumentsService/Shares': {
    /** Метод получения списка акций. */
    post: operations['InstrumentsService_Shares'];
  };
  'InstrumentsService/TradingSchedules': {
    /** Метод получения расписания торгов торговых площадок. */
    post: operations['InstrumentsService_TradingSchedules'];
  };
  'MarketDataService/GetCandles': {
    /** Метод запроса исторических свечей по инструменту. */
    post: operations['MarketDataService_GetCandles'];
  };
  'MarketDataService/GetClosePrices': {
    /** Метод запроса цен закрытия торговой сессии по инструментам. */
    post: operations['MarketDataService_GetClosePrices'];
  };
  'MarketDataService/GetLastPrices': {
    /** Метод запроса цен последних сделок по инструментам. */
    post: operations['MarketDataService_GetLastPrices'];
  };
  'MarketDataService/GetLastTrades': {
    /** Метод запроса обезличенных сделок за последний час. */
    post: operations['MarketDataService_GetLastTrades'];
  };
  'MarketDataService/GetOrderBook': {
    /** Метод получения стакана по инструменту. */
    post: operations['MarketDataService_GetOrderBook'];
  };
  'MarketDataService/GetTradingStatus': {
    /** Метод запроса статуса торгов по инструментам. */
    post: operations['MarketDataService_GetTradingStatus'];
  };
  'MarketDataService/GetTradingStatuses': {
    /** Метод запроса статуса торгов по инструментам. */
    post: operations['MarketDataService_GetTradingStatuses'];
  };
  'MarketDataStreamService/MarketDataServerSideStream': {
    /** Server-side стрим предоставления биржевой информации. */
    post: operations['MarketDataStreamService_MarketDataServerSideStream'];
  };
  'MarketDataStreamService/MarketDataStream': {
    /** Bi-directional стрим предоставления биржевой информации. */
    post: operations['MarketDataStreamService_MarketDataStream'];
  };
  'OperationsService/GetBrokerReport': {
    /** Метод получения брокерского отчёта. */
    post: operations['OperationsService_GetBrokerReport'];
  };
  'OperationsService/GetDividendsForeignIssuer': {
    /** Метод получения отчёта "Справка о доходах за пределами РФ". */
    post: operations['OperationsService_GetDividendsForeignIssuer'];
  };
  'OperationsService/GetOperations': {
    /**
     * Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
     * [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
     */
    post: operations['OperationsService_GetOperations'];
  };
  'OperationsService/GetOperationsByCursor': {
    /**
     * Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
     * [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
     */
    post: operations['OperationsService_GetOperationsByCursor'];
  };
  'OperationsService/GetPortfolio': {
    /** Метод получения портфеля по счёту. */
    post: operations['OperationsService_GetPortfolio'];
  };
  'OperationsService/GetPositions': {
    /** Метод получения списка позиций по счёту. */
    post: operations['OperationsService_GetPositions'];
  };
  'OperationsService/GetWithdrawLimits': {
    /** Метод получения доступного остатка для вывода средств. */
    post: operations['OperationsService_GetWithdrawLimits'];
  };
  'OperationsStreamService/PortfolioStream': {
    /** Server-side stream обновлений портфеля */
    post: operations['OperationsStreamService_PortfolioStream'];
  };
  'OperationsStreamService/PositionsStream': {
    /** Server-side stream обновлений информации по изменению позиций портфеля */
    post: operations['OperationsStreamService_PositionsStream'];
  };
  'OrdersService/CancelOrder': {
    /** Метод отмены биржевой заявки. */
    post: operations['OrdersService_CancelOrder'];
  };
  'OrdersService/GetOrderState': {
    /** Метод получения статуса торгового поручения. */
    post: operations['OrdersService_GetOrderState'];
  };
  'OrdersService/GetOrders': {
    /** Метод получения списка активных заявок по счёту. */
    post: operations['OrdersService_GetOrders'];
  };
  'OrdersService/PostOrder': {
    /** Метод выставления заявки. */
    post: operations['OrdersService_PostOrder'];
  };
  'OrdersService/ReplaceOrder': {
    /** Метод изменения выставленной заявки. */
    post: operations['OrdersService_ReplaceOrder'];
  };
  'OrdersStreamService/TradesStream': {
    /** Stream сделок пользователя */
    post: operations['OrdersStreamService_TradesStream'];
  };
  'SandboxService/CancelSandboxOrder': {
    /** Метод отмены торгового поручения в песочнице. */
    post: operations['SandboxService_CancelSandboxOrder'];
  };
  'SandboxService/CloseSandboxAccount': {
    /** Метод закрытия счёта в песочнице. */
    post: operations['SandboxService_CloseSandboxAccount'];
  };
  'SandboxService/GetSandboxAccounts': {
    /** Метод получения счетов в песочнице. */
    post: operations['SandboxService_GetSandboxAccounts'];
  };
  'SandboxService/GetSandboxOperations': {
    /** Метод получения операций в песочнице по номеру счёта. */
    post: operations['SandboxService_GetSandboxOperations'];
  };
  'SandboxService/GetSandboxOperationsByCursor': {
    /** Метод получения операций в песочнице по номеру счета с пагинацией. */
    post: operations['SandboxService_GetSandboxOperationsByCursor'];
  };
  'SandboxService/GetSandboxOrderState': {
    /** Метод получения статуса заявки в песочнице. */
    post: operations['SandboxService_GetSandboxOrderState'];
  };
  'SandboxService/GetSandboxOrders': {
    /** Метод получения списка активных заявок по счёту в песочнице. */
    post: operations['SandboxService_GetSandboxOrders'];
  };
  'SandboxService/GetSandboxPortfolio': {
    /** Метод получения портфолио в песочнице. */
    post: operations['SandboxService_GetSandboxPortfolio'];
  };
  'SandboxService/GetSandboxPositions': {
    /** Метод получения позиций по виртуальному счёту песочницы. */
    post: operations['SandboxService_GetSandboxPositions'];
  };
  'SandboxService/GetSandboxWithdrawLimits': {
    /** Метод получения доступного остатка для вывода средств в песочнице. */
    post: operations['SandboxService_GetSandboxWithdrawLimits'];
  };
  'SandboxService/OpenSandboxAccount': {
    /** Метод регистрации счёта в песочнице. */
    post: operations['SandboxService_OpenSandboxAccount'];
  };
  'SandboxService/PostSandboxOrder': {
    /** Метод выставления торгового поручения в песочнице. */
    post: operations['SandboxService_PostSandboxOrder'];
  };
  'SandboxService/ReplaceSandboxOrder': {
    /** Метод изменения выставленной заявки. */
    post: operations['SandboxService_ReplaceSandboxOrder'];
  };
  'SandboxService/SandboxPayIn': {
    /** Метод пополнения счёта в песочнице. */
    post: operations['SandboxService_SandboxPayIn'];
  };
  'StopOrdersService/CancelStopOrder': {
    /** Метод отмены стоп-заявки. */
    post: operations['StopOrdersService_CancelStopOrder'];
  };
  'StopOrdersService/GetStopOrders': {
    /** Метод получения списка активных стоп заявок по счёту. */
    post: operations['StopOrdersService_GetStopOrders'];
  };
  'StopOrdersService/PostStopOrder': {
    /** Метод выставления стоп-заявки. */
    post: operations['StopOrdersService_PostStopOrder'];
  };
  'UsersService/GetAccounts': {
    /** Метод получения счетов пользователя. */
    post: operations['UsersService_GetAccounts'];
  };
  'UsersService/GetInfo': {
    /** Метод получения информации о пользователе. */
    post: operations['UsersService_GetInfo'];
  };
  'UsersService/GetMarginAttributes': {
    /** Расчёт маржинальных показателей по счёту. */
    post: operations['UsersService_GetMarginAttributes'];
  };
  'UsersService/GetUserTariff': {
    /** Запрос тарифа пользователя. */
    post: operations['UsersService_GetUserTariff'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @default RUB
     * @enum {string}
     */
    PortfolioRequestCurrencyRequest: 'RUB' | 'USD' | 'EUR';
    /**
     * @example {
     *   "typeUrl": "typeUrl",
     *   "value": "value"
     * }
     */
    protobufAny: {
      typeUrl?: string;
      /** Format: byte */
      value?: string;
    };
    /**
     * @example {
     *   "code": 1,
     *   "details": [
     *     {
     *       "typeUrl": "typeUrl",
     *       "value": "value"
     *     },
     *     {
     *       "typeUrl": "typeUrl",
     *       "value": "value"
     *     }
     *   ],
     *   "message": "message"
     * }
     */
    rpcStatus: {
      /** Format: int32 */
      code?: number;
      message?: string;
      details?: components['schemas']['protobufAny'][];
    };
    /**
     * @description Уровень доступа к счёту.
     * @default ACCOUNT_ACCESS_LEVEL_UNSPECIFIED
     * @enum {string}
     */
    v1AccessLevel:
      | 'ACCOUNT_ACCESS_LEVEL_UNSPECIFIED'
      | 'ACCOUNT_ACCESS_LEVEL_FULL_ACCESS'
      | 'ACCOUNT_ACCESS_LEVEL_READ_ONLY'
      | 'ACCOUNT_ACCESS_LEVEL_NO_ACCESS';
    /**
     * @description Информация о счёте.
     * @example {
     *   "openedDate": "2000-01-23T04:56:07.000Z",
     *   "closedDate": "2000-01-23T04:56:07.000Z",
     *   "name": "name",
     *   "id": "id"
     * }
     */
    v1Account: {
      /** @description Идентификатор счёта. */
      id?: string;
      type?: components['schemas']['v1AccountType'];
      /** @description Название счёта. */
      name?: string;
      status?: components['schemas']['v1AccountStatus'];
      /**
       * Format: date-time
       * @description Дата открытия счёта в часовом поясе UTC.
       */
      openedDate?: string;
      /**
       * Format: date-time
       * @description Дата закрытия счёта в часовом поясе UTC.
       */
      closedDate?: string;
      accessLevel?: components['schemas']['v1AccessLevel'];
    };
    /**
     * @description Статус счёта.
     * @default ACCOUNT_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1AccountStatus:
      | 'ACCOUNT_STATUS_UNSPECIFIED'
      | 'ACCOUNT_STATUS_NEW'
      | 'ACCOUNT_STATUS_OPEN'
      | 'ACCOUNT_STATUS_CLOSED';
    /**
     * @description Счет клиента.
     * @example {
     *   "accountId": "accountId"
     * }
     */
    v1AccountSubscriptionStatus: {
      accountId?: string;
      subscriptionStatus?: components['schemas']['v1PortfolioSubscriptionStatus'];
    };
    /**
     * @description Тип счёта.
     * @default ACCOUNT_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1AccountType:
      | 'ACCOUNT_TYPE_UNSPECIFIED'
      | 'ACCOUNT_TYPE_TINKOFF'
      | 'ACCOUNT_TYPE_TINKOFF_IIS'
      | 'ACCOUNT_TYPE_INVEST_BOX';
    /**
     * @description Операция начисления купонов.
     * @example {
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "valuePercent": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "value": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1AccruedInterest: {
      /** Format: date-time */
      date?: string;
      value?: components['schemas']['v1Quotation'];
      valuePercent?: components['schemas']['v1Quotation'];
      nominal?: components['schemas']['v1Quotation'];
    };
    /**
     * @description Информация об активе.
     * @example {
     *   "uid": "uid",
     *   "instruments": [
     *     {
     *       "uid": "uid",
     *       "classCode": "classCode",
     *       "instrumentType": "instrumentType",
     *       "ticker": "ticker",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "links": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         }
     *       ]
     *     },
     *     {
     *       "uid": "uid",
     *       "classCode": "classCode",
     *       "instrumentType": "instrumentType",
     *       "ticker": "ticker",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "links": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         }
     *       ]
     *     }
     *   ],
     *   "name": "name"
     * }
     */
    v1Asset: {
      uid?: string;
      type?: components['schemas']['v1AssetType'];
      name?: string;
      instruments?: components['schemas']['v1AssetInstrument'][];
    };
    /**
     * @description Облигация.
     * @example {
     *   "indexedNominalFlag": true,
     *   "couponQuantityPerYear": 0,
     *   "currentNominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "taxFreeFlag": true,
     *   "returnCondition": "returnCondition",
     *   "collateralFlag": true,
     *   "stateRegDate": "2000-01-23T04:56:07.000Z",
     *   "issueSizePlan": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "borrowName": "borrowName",
     *   "issueKind": "issueKind",
     *   "placementDate": "2000-01-23T04:56:07.000Z",
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "amortizationFlag": true,
     *   "perpetualFlag": true,
     *   "maturityDate": "2000-01-23T04:56:07.000Z",
     *   "issueSize": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "interestKind": "interestKind",
     *   "subordinatedFlag": true,
     *   "nominalCurrency": "nominalCurrency",
     *   "floatingCouponFlag": true,
     *   "placementPrice": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1AssetBond: {
      currentNominal?: components['schemas']['v1Quotation'];
      borrowName?: string;
      issueSize?: components['schemas']['v1Quotation'];
      nominal?: components['schemas']['v1Quotation'];
      nominalCurrency?: string;
      issueKind?: string;
      interestKind?: string;
      /** Format: int32 */
      couponQuantityPerYear?: number;
      indexedNominalFlag?: boolean;
      subordinatedFlag?: boolean;
      collateralFlag?: boolean;
      taxFreeFlag?: boolean;
      amortizationFlag?: boolean;
      floatingCouponFlag?: boolean;
      perpetualFlag?: boolean;
      /** Format: date-time */
      maturityDate?: string;
      returnCondition?: string;
      /** Format: date-time */
      stateRegDate?: string;
      /** Format: date-time */
      placementDate?: string;
      placementPrice?: components['schemas']['v1Quotation'];
      issueSizePlan?: components['schemas']['v1Quotation'];
    };
    /**
     * @description Клиринговый сертификат участия.
     * @example {
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominalCurrency": "nominalCurrency"
     * }
     */
    v1AssetClearingCertificate: {
      nominal?: components['schemas']['v1Quotation'];
      nominalCurrency?: string;
    };
    /**
     * @description Валюта.
     * @example {
     *   "baseCurrency": "baseCurrency"
     * }
     */
    v1AssetCurrency: {
      baseCurrency?: string;
    };
    /**
     * @description Фонд.
     * @example {
     *   "releasedDate": "2000-01-23T04:56:07.000Z",
     *   "fixedCommission": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "numShare": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "watermarkFlag": true,
     *   "description": "description",
     *   "primaryIndexCompany": "primaryIndexCompany",
     *   "inavCode": "inavCode",
     *   "indexRecoveryPeriod": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "performanceFee": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "paymentType": "paymentType",
     *   "managementType": "managementType",
     *   "primaryIndexTrackingError": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "ucitsFlag": true,
     *   "expenseCommission": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "focusType": "focusType",
     *   "primaryIndexDescription": "primaryIndexDescription",
     *   "rebalancingPlan": "rebalancingPlan",
     *   "hurdleRate": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "primaryIndex": "primaryIndex",
     *   "leveragedFlag": true,
     *   "taxRate": "taxRate",
     *   "issueKind": "issueKind",
     *   "sellDiscount": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "rebalancingDates": [
     *     "2000-01-23T04:56:07.000Z",
     *     "2000-01-23T04:56:07.000Z"
     *   ],
     *   "rebalancingFreq": "rebalancingFreq",
     *   "rebalancingFlag": true,
     *   "nominalCurrency": "nominalCurrency",
     *   "divYieldFlag": true,
     *   "totalExpense": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "buyPremium": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1AssetEtf: {
      totalExpense?: components['schemas']['v1Quotation'];
      hurdleRate?: components['schemas']['v1Quotation'];
      performanceFee?: components['schemas']['v1Quotation'];
      fixedCommission?: components['schemas']['v1Quotation'];
      paymentType?: string;
      watermarkFlag?: boolean;
      buyPremium?: components['schemas']['v1Quotation'];
      sellDiscount?: components['schemas']['v1Quotation'];
      rebalancingFlag?: boolean;
      rebalancingFreq?: string;
      managementType?: string;
      primaryIndex?: string;
      focusType?: string;
      leveragedFlag?: boolean;
      numShare?: components['schemas']['v1Quotation'];
      ucitsFlag?: boolean;
      /** Format: date-time */
      releasedDate?: string;
      description?: string;
      primaryIndexDescription?: string;
      primaryIndexCompany?: string;
      indexRecoveryPeriod?: components['schemas']['v1Quotation'];
      inavCode?: string;
      divYieldFlag?: boolean;
      expenseCommission?: components['schemas']['v1Quotation'];
      primaryIndexTrackingError?: components['schemas']['v1Quotation'];
      rebalancingPlan?: string;
      taxRate?: string;
      rebalancingDates?: string[];
      issueKind?: string;
      nominal?: components['schemas']['v1Quotation'];
      nominalCurrency?: string;
    };
    /**
     * @example {
     *   "cfi": "cfi",
     *   "description": "description",
     *   "uid": "uid",
     *   "requiredTests": [
     *     "requiredTests",
     *     "requiredTests"
     *   ],
     *   "codeNsd": "codeNsd",
     *   "deletedAt": "2000-01-23T04:56:07.000Z",
     *   "security": {
     *     "etf": {
     *       "releasedDate": "2000-01-23T04:56:07.000Z",
     *       "fixedCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "numShare": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "watermarkFlag": true,
     *       "description": "description",
     *       "primaryIndexCompany": "primaryIndexCompany",
     *       "inavCode": "inavCode",
     *       "indexRecoveryPeriod": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "performanceFee": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "paymentType": "paymentType",
     *       "managementType": "managementType",
     *       "primaryIndexTrackingError": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "ucitsFlag": true,
     *       "expenseCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "focusType": "focusType",
     *       "primaryIndexDescription": "primaryIndexDescription",
     *       "rebalancingPlan": "rebalancingPlan",
     *       "hurdleRate": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "primaryIndex": "primaryIndex",
     *       "leveragedFlag": true,
     *       "taxRate": "taxRate",
     *       "issueKind": "issueKind",
     *       "sellDiscount": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "rebalancingDates": [
     *         "2000-01-23T04:56:07.000Z",
     *         "2000-01-23T04:56:07.000Z"
     *       ],
     *       "rebalancingFreq": "rebalancingFreq",
     *       "rebalancingFlag": true,
     *       "nominalCurrency": "nominalCurrency",
     *       "divYieldFlag": true,
     *       "totalExpense": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "buyPremium": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     "clearingCertificate": {
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominalCurrency": "nominalCurrency"
     *     },
     *     "share": {
     *       "totalFloat": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dividendRate": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "registryDate": "2000-01-23T04:56:07.000Z",
     *       "primaryIndex": "primaryIndex",
     *       "preferredShareType": "preferredShareType",
     *       "issueSizePlan": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "issueKind": "issueKind",
     *       "placementDate": "2000-01-23T04:56:07.000Z",
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "issueSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominalCurrency": "nominalCurrency",
     *       "divYieldFlag": true,
     *       "represIsin": "represIsin",
     *       "ipoDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     "type": "type",
     *     "bond": {
     *       "indexedNominalFlag": true,
     *       "couponQuantityPerYear": 0,
     *       "currentNominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "taxFreeFlag": true,
     *       "returnCondition": "returnCondition",
     *       "collateralFlag": true,
     *       "stateRegDate": "2000-01-23T04:56:07.000Z",
     *       "issueSizePlan": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "borrowName": "borrowName",
     *       "issueKind": "issueKind",
     *       "placementDate": "2000-01-23T04:56:07.000Z",
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "amortizationFlag": true,
     *       "perpetualFlag": true,
     *       "maturityDate": "2000-01-23T04:56:07.000Z",
     *       "issueSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "interestKind": "interestKind",
     *       "subordinatedFlag": true,
     *       "nominalCurrency": "nominalCurrency",
     *       "floatingCouponFlag": true,
     *       "placementPrice": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     "sp": {
     *       "issueSizePlan": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "borrowName": "borrowName",
     *       "issueKind": "issueKind",
     *       "placementDate": "2000-01-23T04:56:07.000Z",
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "maturityDate": "2000-01-23T04:56:07.000Z",
     *       "logicPortfolio": "logicPortfolio",
     *       "safetyBarrier": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "basicAsset": "basicAsset",
     *       "issueSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominalCurrency": "nominalCurrency"
     *     },
     *     "isin": "isin"
     *   },
     *   "instruments": [
     *     {
     *       "uid": "uid",
     *       "classCode": "classCode",
     *       "instrumentType": "instrumentType",
     *       "ticker": "ticker",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "links": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         }
     *       ]
     *     },
     *     {
     *       "uid": "uid",
     *       "classCode": "classCode",
     *       "instrumentType": "instrumentType",
     *       "ticker": "ticker",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "links": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "type": "type"
     *         }
     *       ]
     *     }
     *   ],
     *   "gosRegCode": "gosRegCode",
     *   "name": "name",
     *   "brCodeName": "brCodeName",
     *   "currency": {
     *     "baseCurrency": "baseCurrency"
     *   },
     *   "brCode": "brCode",
     *   "brand": {
     *     "uid": "uid",
     *     "name": "name",
     *     "description": "description",
     *     "company": "company",
     *     "sector": "sector",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "info": "info",
     *     "countryOfRisk": "countryOfRisk"
     *   },
     *   "nameBrief": "nameBrief",
     *   "status": "status",
     *   "updatedAt": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1AssetFull: {
      uid?: string;
      type?: components['schemas']['v1AssetType'];
      name?: string;
      nameBrief?: string;
      description?: string;
      /** Format: date-time */
      deletedAt?: string;
      requiredTests?: string[];
      currency?: components['schemas']['v1AssetCurrency'];
      security?: components['schemas']['v1AssetSecurity'];
      gosRegCode?: string;
      cfi?: string;
      codeNsd?: string;
      status?: string;
      brand?: components['schemas']['v1Brand'];
      /** Format: date-time */
      updatedAt?: string;
      brCode?: string;
      brCodeName?: string;
      instruments?: components['schemas']['v1AssetInstrument'][];
    };
    /**
     * @description Идентификаторы инструмента.
     * @example {
     *   "uid": "uid",
     *   "classCode": "classCode",
     *   "instrumentType": "instrumentType",
     *   "ticker": "ticker",
     *   "positionUid": "positionUid",
     *   "figi": "figi",
     *   "links": [
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "type": "type"
     *     },
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "type": "type"
     *     }
     *   ]
     * }
     */
    v1AssetInstrument: {
      uid?: string;
      figi?: string;
      instrumentType?: string;
      ticker?: string;
      classCode?: string;
      links?: components['schemas']['v1InstrumentLink'][];
      instrumentKind?: components['schemas']['v1InstrumentType'];
      positionUid?: string;
    };
    /** @description Запрос актива по идентификатору. */
    v1AssetRequest: {
      id?: string;
    };
    /**
     * @description Данные по активу.
     * @example {
     *   "asset": {
     *     "cfi": "cfi",
     *     "description": "description",
     *     "uid": "uid",
     *     "requiredTests": [
     *       "requiredTests",
     *       "requiredTests"
     *     ],
     *     "codeNsd": "codeNsd",
     *     "deletedAt": "2000-01-23T04:56:07.000Z",
     *     "security": {
     *       "etf": {
     *         "releasedDate": "2000-01-23T04:56:07.000Z",
     *         "fixedCommission": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "numShare": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "watermarkFlag": true,
     *         "description": "description",
     *         "primaryIndexCompany": "primaryIndexCompany",
     *         "inavCode": "inavCode",
     *         "indexRecoveryPeriod": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "performanceFee": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "paymentType": "paymentType",
     *         "managementType": "managementType",
     *         "primaryIndexTrackingError": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "nominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "ucitsFlag": true,
     *         "expenseCommission": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "focusType": "focusType",
     *         "primaryIndexDescription": "primaryIndexDescription",
     *         "rebalancingPlan": "rebalancingPlan",
     *         "hurdleRate": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "primaryIndex": "primaryIndex",
     *         "leveragedFlag": true,
     *         "taxRate": "taxRate",
     *         "issueKind": "issueKind",
     *         "sellDiscount": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "rebalancingDates": [
     *           "2000-01-23T04:56:07.000Z",
     *           "2000-01-23T04:56:07.000Z"
     *         ],
     *         "rebalancingFreq": "rebalancingFreq",
     *         "rebalancingFlag": true,
     *         "nominalCurrency": "nominalCurrency",
     *         "divYieldFlag": true,
     *         "totalExpense": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "buyPremium": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       },
     *       "clearingCertificate": {
     *         "nominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "nominalCurrency": "nominalCurrency"
     *       },
     *       "share": {
     *         "totalFloat": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "dividendRate": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "registryDate": "2000-01-23T04:56:07.000Z",
     *         "primaryIndex": "primaryIndex",
     *         "preferredShareType": "preferredShareType",
     *         "issueSizePlan": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "issueKind": "issueKind",
     *         "placementDate": "2000-01-23T04:56:07.000Z",
     *         "nominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "issueSize": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "nominalCurrency": "nominalCurrency",
     *         "divYieldFlag": true,
     *         "represIsin": "represIsin",
     *         "ipoDate": "2000-01-23T04:56:07.000Z"
     *       },
     *       "type": "type",
     *       "bond": {
     *         "indexedNominalFlag": true,
     *         "couponQuantityPerYear": 0,
     *         "currentNominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "taxFreeFlag": true,
     *         "returnCondition": "returnCondition",
     *         "collateralFlag": true,
     *         "stateRegDate": "2000-01-23T04:56:07.000Z",
     *         "issueSizePlan": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "borrowName": "borrowName",
     *         "issueKind": "issueKind",
     *         "placementDate": "2000-01-23T04:56:07.000Z",
     *         "nominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "amortizationFlag": true,
     *         "perpetualFlag": true,
     *         "maturityDate": "2000-01-23T04:56:07.000Z",
     *         "issueSize": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "interestKind": "interestKind",
     *         "subordinatedFlag": true,
     *         "nominalCurrency": "nominalCurrency",
     *         "floatingCouponFlag": true,
     *         "placementPrice": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       },
     *       "sp": {
     *         "issueSizePlan": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "borrowName": "borrowName",
     *         "issueKind": "issueKind",
     *         "placementDate": "2000-01-23T04:56:07.000Z",
     *         "nominal": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "maturityDate": "2000-01-23T04:56:07.000Z",
     *         "logicPortfolio": "logicPortfolio",
     *         "safetyBarrier": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "basicAsset": "basicAsset",
     *         "issueSize": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "nominalCurrency": "nominalCurrency"
     *       },
     *       "isin": "isin"
     *     },
     *     "instruments": [
     *       {
     *         "uid": "uid",
     *         "classCode": "classCode",
     *         "instrumentType": "instrumentType",
     *         "ticker": "ticker",
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "links": [
     *           {
     *             "instrumentUid": "instrumentUid",
     *             "type": "type"
     *           },
     *           {
     *             "instrumentUid": "instrumentUid",
     *             "type": "type"
     *           }
     *         ]
     *       },
     *       {
     *         "uid": "uid",
     *         "classCode": "classCode",
     *         "instrumentType": "instrumentType",
     *         "ticker": "ticker",
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "links": [
     *           {
     *             "instrumentUid": "instrumentUid",
     *             "type": "type"
     *           },
     *           {
     *             "instrumentUid": "instrumentUid",
     *             "type": "type"
     *           }
     *         ]
     *       }
     *     ],
     *     "gosRegCode": "gosRegCode",
     *     "name": "name",
     *     "brCodeName": "brCodeName",
     *     "currency": {
     *       "baseCurrency": "baseCurrency"
     *     },
     *     "brCode": "brCode",
     *     "brand": {
     *       "uid": "uid",
     *       "name": "name",
     *       "description": "description",
     *       "company": "company",
     *       "sector": "sector",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "info": "info",
     *       "countryOfRisk": "countryOfRisk"
     *     },
     *     "nameBrief": "nameBrief",
     *     "status": "status",
     *     "updatedAt": "2000-01-23T04:56:07.000Z"
     *   }
     * }
     */
    v1AssetResponse: {
      asset?: components['schemas']['v1AssetFull'];
    };
    /**
     * @description Ценная бумага.
     * @example {
     *   "etf": {
     *     "releasedDate": "2000-01-23T04:56:07.000Z",
     *     "fixedCommission": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "numShare": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "watermarkFlag": true,
     *     "description": "description",
     *     "primaryIndexCompany": "primaryIndexCompany",
     *     "inavCode": "inavCode",
     *     "indexRecoveryPeriod": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "performanceFee": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "paymentType": "paymentType",
     *     "managementType": "managementType",
     *     "primaryIndexTrackingError": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "ucitsFlag": true,
     *     "expenseCommission": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "focusType": "focusType",
     *     "primaryIndexDescription": "primaryIndexDescription",
     *     "rebalancingPlan": "rebalancingPlan",
     *     "hurdleRate": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "primaryIndex": "primaryIndex",
     *     "leveragedFlag": true,
     *     "taxRate": "taxRate",
     *     "issueKind": "issueKind",
     *     "sellDiscount": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "rebalancingDates": [
     *       "2000-01-23T04:56:07.000Z",
     *       "2000-01-23T04:56:07.000Z"
     *     ],
     *     "rebalancingFreq": "rebalancingFreq",
     *     "rebalancingFlag": true,
     *     "nominalCurrency": "nominalCurrency",
     *     "divYieldFlag": true,
     *     "totalExpense": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "buyPremium": {
     *       "nano": 6,
     *       "units": "units"
     *     }
     *   },
     *   "clearingCertificate": {
     *     "nominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominalCurrency": "nominalCurrency"
     *   },
     *   "share": {
     *     "totalFloat": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dividendRate": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "registryDate": "2000-01-23T04:56:07.000Z",
     *     "primaryIndex": "primaryIndex",
     *     "preferredShareType": "preferredShareType",
     *     "issueSizePlan": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "issueKind": "issueKind",
     *     "placementDate": "2000-01-23T04:56:07.000Z",
     *     "nominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "issueSize": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominalCurrency": "nominalCurrency",
     *     "divYieldFlag": true,
     *     "represIsin": "represIsin",
     *     "ipoDate": "2000-01-23T04:56:07.000Z"
     *   },
     *   "type": "type",
     *   "bond": {
     *     "indexedNominalFlag": true,
     *     "couponQuantityPerYear": 0,
     *     "currentNominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "taxFreeFlag": true,
     *     "returnCondition": "returnCondition",
     *     "collateralFlag": true,
     *     "stateRegDate": "2000-01-23T04:56:07.000Z",
     *     "issueSizePlan": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "borrowName": "borrowName",
     *     "issueKind": "issueKind",
     *     "placementDate": "2000-01-23T04:56:07.000Z",
     *     "nominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "amortizationFlag": true,
     *     "perpetualFlag": true,
     *     "maturityDate": "2000-01-23T04:56:07.000Z",
     *     "issueSize": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "interestKind": "interestKind",
     *     "subordinatedFlag": true,
     *     "nominalCurrency": "nominalCurrency",
     *     "floatingCouponFlag": true,
     *     "placementPrice": {
     *       "nano": 6,
     *       "units": "units"
     *     }
     *   },
     *   "sp": {
     *     "issueSizePlan": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "borrowName": "borrowName",
     *     "issueKind": "issueKind",
     *     "placementDate": "2000-01-23T04:56:07.000Z",
     *     "nominal": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "maturityDate": "2000-01-23T04:56:07.000Z",
     *     "logicPortfolio": "logicPortfolio",
     *     "safetyBarrier": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "basicAsset": "basicAsset",
     *     "issueSize": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominalCurrency": "nominalCurrency"
     *   },
     *   "isin": "isin"
     * }
     */
    v1AssetSecurity: {
      isin?: string;
      type?: string;
      instrumentKind?: components['schemas']['v1InstrumentType'];
      share?: components['schemas']['v1AssetShare'];
      bond?: components['schemas']['v1AssetBond'];
      sp?: components['schemas']['v1AssetStructuredProduct'];
      etf?: components['schemas']['v1AssetEtf'];
      clearingCertificate?: components['schemas']['v1AssetClearingCertificate'];
    };
    /**
     * @description Акция.
     * @example {
     *   "totalFloat": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dividendRate": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "registryDate": "2000-01-23T04:56:07.000Z",
     *   "primaryIndex": "primaryIndex",
     *   "preferredShareType": "preferredShareType",
     *   "issueSizePlan": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "issueKind": "issueKind",
     *   "placementDate": "2000-01-23T04:56:07.000Z",
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "issueSize": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominalCurrency": "nominalCurrency",
     *   "divYieldFlag": true,
     *   "represIsin": "represIsin",
     *   "ipoDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1AssetShare: {
      type?: components['schemas']['v1ShareType'];
      issueSize?: components['schemas']['v1Quotation'];
      nominal?: components['schemas']['v1Quotation'];
      nominalCurrency?: string;
      primaryIndex?: string;
      dividendRate?: components['schemas']['v1Quotation'];
      preferredShareType?: string;
      /** Format: date-time */
      ipoDate?: string;
      /** Format: date-time */
      registryDate?: string;
      divYieldFlag?: boolean;
      issueKind?: string;
      /** Format: date-time */
      placementDate?: string;
      represIsin?: string;
      issueSizePlan?: components['schemas']['v1Quotation'];
      totalFloat?: components['schemas']['v1Quotation'];
    };
    /**
     * @description Структурная нота.
     * @example {
     *   "issueSizePlan": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "borrowName": "borrowName",
     *   "issueKind": "issueKind",
     *   "placementDate": "2000-01-23T04:56:07.000Z",
     *   "nominal": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "maturityDate": "2000-01-23T04:56:07.000Z",
     *   "logicPortfolio": "logicPortfolio",
     *   "safetyBarrier": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "basicAsset": "basicAsset",
     *   "issueSize": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominalCurrency": "nominalCurrency"
     * }
     */
    v1AssetStructuredProduct: {
      borrowName?: string;
      nominal?: components['schemas']['v1Quotation'];
      nominalCurrency?: string;
      type?: components['schemas']['v1StructuredProductType'];
      logicPortfolio?: string;
      assetType?: components['schemas']['v1AssetType'];
      basicAsset?: string;
      safetyBarrier?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      maturityDate?: string;
      issueSizePlan?: components['schemas']['v1Quotation'];
      issueSize?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      placementDate?: string;
      issueKind?: string;
    };
    /**
     * @description Тип актива.
     * @default ASSET_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1AssetType:
      | 'ASSET_TYPE_UNSPECIFIED'
      | 'ASSET_TYPE_CURRENCY'
      | 'ASSET_TYPE_COMMODITY'
      | 'ASSET_TYPE_INDEX'
      | 'ASSET_TYPE_SECURITY';
    /** @description Запрос списка активов. */
    v1AssetsRequest: {
      instrumentType?: components['schemas']['v1InstrumentType'];
    };
    /**
     * @description Список активов.
     * @example {
     *   "assets": [
     *     {
     *       "uid": "uid",
     *       "instruments": [
     *         {
     *           "uid": "uid",
     *           "classCode": "classCode",
     *           "instrumentType": "instrumentType",
     *           "ticker": "ticker",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "links": [
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             },
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             }
     *           ]
     *         },
     *         {
     *           "uid": "uid",
     *           "classCode": "classCode",
     *           "instrumentType": "instrumentType",
     *           "ticker": "ticker",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "links": [
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             },
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             }
     *           ]
     *         }
     *       ],
     *       "name": "name"
     *     },
     *     {
     *       "uid": "uid",
     *       "instruments": [
     *         {
     *           "uid": "uid",
     *           "classCode": "classCode",
     *           "instrumentType": "instrumentType",
     *           "ticker": "ticker",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "links": [
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             },
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             }
     *           ]
     *         },
     *         {
     *           "uid": "uid",
     *           "classCode": "classCode",
     *           "instrumentType": "instrumentType",
     *           "ticker": "ticker",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "links": [
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             },
     *             {
     *               "instrumentUid": "instrumentUid",
     *               "type": "type"
     *             }
     *           ]
     *         }
     *       ],
     *       "name": "name"
     *     }
     *   ]
     * }
     */
    v1AssetsResponse: {
      assets?: components['schemas']['v1Asset'][];
    };
    /**
     * @description Объект передачи информации об облигации.
     * @example {
     *   "countryOfRisk": "countryOfRisk",
     *   "blockedTcaFlag": true,
     *   "maturityDate": "2000-01-23T04:56:07.000Z",
     *   "sellAvailableFlag": true,
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "placementPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "sector": "sector",
     *   "liquidityFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "shortEnabledFlag": true,
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "name": "name",
     *   "exchange": "exchange",
     *   "subordinatedFlag": true,
     *   "floatingCouponFlag": true,
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "lot": 0,
     *   "uid": "uid",
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominal": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "currency": "currency",
     *   "aciValue": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "couponQuantityPerYear": 1,
     *   "forQualInvestorFlag": true,
     *   "initialNominal": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "stateRegDate": "2000-01-23T04:56:07.000Z",
     *   "issueSizePlan": "issueSizePlan",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "issueKind": "issueKind",
     *   "placementDate": "2000-01-23T04:56:07.000Z",
     *   "amortizationFlag": true,
     *   "perpetualFlag": true,
     *   "issueSize": "issueSize",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "isin": "isin"
     * }
     */
    v1Bond: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      /** Format: int32 */
      couponQuantityPerYear?: number;
      /** Format: date-time */
      maturityDate?: string;
      nominal?: components['schemas']['v1MoneyValue'];
      initialNominal?: components['schemas']['v1MoneyValue'];
      /** Format: date-time */
      stateRegDate?: string;
      /** Format: date-time */
      placementDate?: string;
      placementPrice?: components['schemas']['v1MoneyValue'];
      aciValue?: components['schemas']['v1MoneyValue'];
      countryOfRisk?: string;
      countryOfRiskName?: string;
      sector?: string;
      issueKind?: string;
      /** Format: int64 */
      issueSize?: string;
      /** Format: int64 */
      issueSizePlan?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      floatingCouponFlag?: boolean;
      perpetualFlag?: boolean;
      amortizationFlag?: boolean;
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      subordinatedFlag?: boolean;
      liquidityFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
      riskLevel?: components['schemas']['v1RiskLevel'];
    };
    /**
     * @description Информация об облигации.
     * @example {
     *   "instrument": {
     *     "countryOfRisk": "countryOfRisk",
     *     "blockedTcaFlag": true,
     *     "maturityDate": "2000-01-23T04:56:07.000Z",
     *     "sellAvailableFlag": true,
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "placementPrice": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "sector": "sector",
     *     "liquidityFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "shortEnabledFlag": true,
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "name": "name",
     *     "exchange": "exchange",
     *     "subordinatedFlag": true,
     *     "floatingCouponFlag": true,
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "lot": 0,
     *     "uid": "uid",
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominal": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "currency": "currency",
     *     "aciValue": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "couponQuantityPerYear": 1,
     *     "forQualInvestorFlag": true,
     *     "initialNominal": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "stateRegDate": "2000-01-23T04:56:07.000Z",
     *     "issueSizePlan": "issueSizePlan",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "issueKind": "issueKind",
     *     "placementDate": "2000-01-23T04:56:07.000Z",
     *     "amortizationFlag": true,
     *     "perpetualFlag": true,
     *     "issueSize": "issueSize",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "isin": "isin"
     *   }
     * }
     */
    v1BondResponse: {
      instrument?: components['schemas']['v1Bond'];
    };
    /**
     * @description Список облигаций.
     * @example {
     *   "instruments": [
     *     {
     *       "countryOfRisk": "countryOfRisk",
     *       "blockedTcaFlag": true,
     *       "maturityDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "placementPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sector": "sector",
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "shortEnabledFlag": true,
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "exchange": "exchange",
     *       "subordinatedFlag": true,
     *       "floatingCouponFlag": true,
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lot": 0,
     *       "uid": "uid",
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "aciValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "couponQuantityPerYear": 1,
     *       "forQualInvestorFlag": true,
     *       "initialNominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "stateRegDate": "2000-01-23T04:56:07.000Z",
     *       "issueSizePlan": "issueSizePlan",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "issueKind": "issueKind",
     *       "placementDate": "2000-01-23T04:56:07.000Z",
     *       "amortizationFlag": true,
     *       "perpetualFlag": true,
     *       "issueSize": "issueSize",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     },
     *     {
     *       "countryOfRisk": "countryOfRisk",
     *       "blockedTcaFlag": true,
     *       "maturityDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "placementPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sector": "sector",
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "shortEnabledFlag": true,
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "exchange": "exchange",
     *       "subordinatedFlag": true,
     *       "floatingCouponFlag": true,
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lot": 0,
     *       "uid": "uid",
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "aciValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "couponQuantityPerYear": 1,
     *       "forQualInvestorFlag": true,
     *       "initialNominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "stateRegDate": "2000-01-23T04:56:07.000Z",
     *       "issueSizePlan": "issueSizePlan",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "issueKind": "issueKind",
     *       "placementDate": "2000-01-23T04:56:07.000Z",
     *       "amortizationFlag": true,
     *       "perpetualFlag": true,
     *       "issueSize": "issueSize",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1BondsResponse: {
      instruments?: components['schemas']['v1Bond'][];
    };
    /**
     * @description Бренд.
     * @example {
     *   "uid": "uid",
     *   "name": "name",
     *   "description": "description",
     *   "company": "company",
     *   "sector": "sector",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "info": "info",
     *   "countryOfRisk": "countryOfRisk"
     * }
     */
    v1Brand: {
      uid?: string;
      name?: string;
      description?: string;
      info?: string;
      company?: string;
      sector?: string;
      countryOfRisk?: string;
      countryOfRiskName?: string;
    };
    /**
     * @example {
     *   "exchangeClearingCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "separateAgreementDate": "separateAgreementDate",
     *   "orderId": "orderId",
     *   "figi": "figi",
     *   "executeSign": "executeSign",
     *   "brokerCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "repoRate": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "orderAmount": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "aciValue": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "secValueDate": "2000-01-23T04:56:07.000Z",
     *   "direction": "direction",
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "quantity": "quantity",
     *   "deliveryType": "deliveryType",
     *   "tradeDatetime": "2000-01-23T04:56:07.000Z",
     *   "exchangeCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "brokerStatus": "brokerStatus",
     *   "totalOrderAmount": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "separateAgreementNumber": "separateAgreementNumber",
     *   "clearValueDate": "2000-01-23T04:56:07.000Z",
     *   "name": "name",
     *   "exchange": "exchange",
     *   "separateAgreementType": "separateAgreementType",
     *   "tradeId": "tradeId",
     *   "party": "party"
     * }
     */
    v1BrokerReport: {
      tradeId?: string;
      orderId?: string;
      figi?: string;
      executeSign?: string;
      /** Format: date-time */
      tradeDatetime?: string;
      exchange?: string;
      classCode?: string;
      direction?: string;
      name?: string;
      ticker?: string;
      price?: components['schemas']['v1MoneyValue'];
      /** Format: int64 */
      quantity?: string;
      orderAmount?: components['schemas']['v1MoneyValue'];
      aciValue?: components['schemas']['v1Quotation'];
      totalOrderAmount?: components['schemas']['v1MoneyValue'];
      brokerCommission?: components['schemas']['v1MoneyValue'];
      exchangeCommission?: components['schemas']['v1MoneyValue'];
      exchangeClearingCommission?: components['schemas']['v1MoneyValue'];
      repoRate?: components['schemas']['v1Quotation'];
      party?: string;
      /** Format: date-time */
      clearValueDate?: string;
      /** Format: date-time */
      secValueDate?: string;
      brokerStatus?: string;
      separateAgreementType?: string;
      separateAgreementNumber?: string;
      separateAgreementDate?: string;
      deliveryType?: string;
    };
    v1BrokerReportRequest: {
      generateBrokerReportRequest?: components['schemas']['v1GenerateBrokerReportRequest'];
      getBrokerReportRequest?: components['schemas']['v1GetBrokerReportRequest'];
    };
    /**
     * @example {
     *   "generateBrokerReportResponse": {
     *     "taskId": "taskId"
     *   },
     *   "getBrokerReportResponse": {
     *     "brokerReport": [
     *       {
     *         "exchangeClearingCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "separateAgreementDate": "separateAgreementDate",
     *         "orderId": "orderId",
     *         "figi": "figi",
     *         "executeSign": "executeSign",
     *         "brokerCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "repoRate": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "orderAmount": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "price": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "aciValue": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "secValueDate": "2000-01-23T04:56:07.000Z",
     *         "direction": "direction",
     *         "classCode": "classCode",
     *         "ticker": "ticker",
     *         "quantity": "quantity",
     *         "deliveryType": "deliveryType",
     *         "tradeDatetime": "2000-01-23T04:56:07.000Z",
     *         "exchangeCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "brokerStatus": "brokerStatus",
     *         "totalOrderAmount": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "separateAgreementNumber": "separateAgreementNumber",
     *         "clearValueDate": "2000-01-23T04:56:07.000Z",
     *         "name": "name",
     *         "exchange": "exchange",
     *         "separateAgreementType": "separateAgreementType",
     *         "tradeId": "tradeId",
     *         "party": "party"
     *       },
     *       {
     *         "exchangeClearingCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "separateAgreementDate": "separateAgreementDate",
     *         "orderId": "orderId",
     *         "figi": "figi",
     *         "executeSign": "executeSign",
     *         "brokerCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "repoRate": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "orderAmount": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "price": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "aciValue": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "secValueDate": "2000-01-23T04:56:07.000Z",
     *         "direction": "direction",
     *         "classCode": "classCode",
     *         "ticker": "ticker",
     *         "quantity": "quantity",
     *         "deliveryType": "deliveryType",
     *         "tradeDatetime": "2000-01-23T04:56:07.000Z",
     *         "exchangeCommission": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "brokerStatus": "brokerStatus",
     *         "totalOrderAmount": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "separateAgreementNumber": "separateAgreementNumber",
     *         "clearValueDate": "2000-01-23T04:56:07.000Z",
     *         "name": "name",
     *         "exchange": "exchange",
     *         "separateAgreementType": "separateAgreementType",
     *         "tradeId": "tradeId",
     *         "party": "party"
     *       }
     *     ],
     *     "pagesCount": 6,
     *     "page": 1,
     *     "itemsCount": 0
     *   }
     * }
     */
    v1BrokerReportResponse: {
      generateBrokerReportResponse?: components['schemas']['v1GenerateBrokerReportResponse'];
      getBrokerReportResponse?: components['schemas']['v1GetBrokerReportResponse'];
    };
    /** @description Запрос отмены торгового поручения. */
    v1CancelOrderRequest: {
      accountId?: string;
      orderId?: string;
    };
    /**
     * @description Результат отмены торгового поручения.
     * @example {
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1CancelOrderResponse: {
      /** Format: date-time */
      time?: string;
    };
    /** @description Запрос отмены выставленной стоп-заявки. */
    v1CancelStopOrderRequest: {
      accountId?: string;
      stopOrderId?: string;
    };
    /**
     * @description Результат отмены выставленной стоп-заявки.
     * @example {
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1CancelStopOrderResponse: {
      /** Format: date-time */
      time?: string;
    };
    /**
     * @description Пакет свечей в рамках стрима.
     * @example {
     *   "volume": "volume",
     *   "high": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "lastTradeTs": "2000-01-23T04:56:07.000Z",
     *   "low": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z",
     *   "close": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "open": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1Candle: {
      figi?: string;
      interval?: components['schemas']['v1SubscriptionInterval'];
      open?: components['schemas']['v1Quotation'];
      high?: components['schemas']['v1Quotation'];
      low?: components['schemas']['v1Quotation'];
      close?: components['schemas']['v1Quotation'];
      /** Format: int64 */
      volume?: string;
      /** Format: date-time */
      time?: string;
      /** Format: date-time */
      lastTradeTs?: string;
      instrumentUid?: string;
    };
    /** @description Запрос изменения статус подписки на свечи. */
    v1CandleInstrument: {
      figi?: string;
      interval?: components['schemas']['v1SubscriptionInterval'];
      instrumentId?: string;
    };
    /**
     * @description Интервал свечей.
     * @default CANDLE_INTERVAL_UNSPECIFIED
     * @enum {string}
     */
    v1CandleInterval:
      | 'CANDLE_INTERVAL_UNSPECIFIED'
      | 'CANDLE_INTERVAL_1_MIN'
      | 'CANDLE_INTERVAL_5_MIN'
      | 'CANDLE_INTERVAL_15_MIN'
      | 'CANDLE_INTERVAL_HOUR'
      | 'CANDLE_INTERVAL_DAY'
      | 'CANDLE_INTERVAL_2_MIN'
      | 'CANDLE_INTERVAL_3_MIN'
      | 'CANDLE_INTERVAL_10_MIN'
      | 'CANDLE_INTERVAL_30_MIN'
      | 'CANDLE_INTERVAL_2_HOUR'
      | 'CANDLE_INTERVAL_4_HOUR'
      | 'CANDLE_INTERVAL_WEEK'
      | 'CANDLE_INTERVAL_MONTH';
    /**
     * @description Статус подписки на свечи.
     * @example {
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi"
     * }
     */
    v1CandleSubscription: {
      figi?: string;
      interval?: components['schemas']['v1SubscriptionInterval'];
      subscriptionStatus?: components['schemas']['v1SubscriptionStatus'];
      instrumentUid?: string;
    };
    /** @description Запрос закрытия счёта в песочнице. */
    v1CloseSandboxAccountRequest: {
      accountId?: string;
    };
    /** @description Результат закрытия счёта в песочнице. */
    v1CloseSandboxAccountResponse: Record<string, never>;
    /**
     * @description Данные о стране.
     * @example {
     *   "alfaTwo": "alfaTwo",
     *   "alfaThree": "alfaThree",
     *   "name": "name",
     *   "nameBrief": "nameBrief"
     * }
     */
    v1CountryResponse: {
      alfaTwo?: string;
      alfaThree?: string;
      name?: string;
      nameBrief?: string;
    };
    /**
     * @description Объект передачи информации о купоне облигации.
     * @example {
     *   "fixDate": "2000-01-23T04:56:07.000Z",
     *   "couponPeriod": 0,
     *   "couponNumber": "couponNumber",
     *   "couponEndDate": "2000-01-23T04:56:07.000Z",
     *   "figi": "figi",
     *   "couponDate": "2000-01-23T04:56:07.000Z",
     *   "couponStartDate": "2000-01-23T04:56:07.000Z",
     *   "payOneBond": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1Coupon: {
      figi?: string;
      /** Format: date-time */
      couponDate?: string;
      /** Format: int64 */
      couponNumber?: string;
      /** Format: date-time */
      fixDate?: string;
      payOneBond?: components['schemas']['v1MoneyValue'];
      couponType?: components['schemas']['v1CouponType'];
      /** Format: date-time */
      couponStartDate?: string;
      /** Format: date-time */
      couponEndDate?: string;
      /** Format: int32 */
      couponPeriod?: number;
    };
    /**
     * @description Тип купонов.
     * @default COUPON_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1CouponType:
      | 'COUPON_TYPE_UNSPECIFIED'
      | 'COUPON_TYPE_CONSTANT'
      | 'COUPON_TYPE_FLOATING'
      | 'COUPON_TYPE_DISCOUNT'
      | 'COUPON_TYPE_MORTGAGE'
      | 'COUPON_TYPE_FIX'
      | 'COUPON_TYPE_VARIABLE'
      | 'COUPON_TYPE_OTHER';
    /**
     * @description Данные по валютам.
     * @example {
     *   "instruments": [
     *     {
     *       "isoCurrencyName": "isoCurrencyName",
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     },
     *     {
     *       "isoCurrencyName": "isoCurrencyName",
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1CurrenciesResponse: {
      instruments?: components['schemas']['v1Currency'][];
    };
    /**
     * @description Объект передачи информации о валюте.
     * @example {
     *   "isoCurrencyName": "isoCurrencyName",
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominal": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "forQualInvestorFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "name": "name",
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "isin": "isin"
     * }
     */
    v1Currency: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      nominal?: components['schemas']['v1MoneyValue'];
      countryOfRisk?: string;
      countryOfRiskName?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      isoCurrencyName?: string;
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
    };
    /**
     * @description Данные по валюте.
     * @example {
     *   "instrument": {
     *     "isoCurrencyName": "isoCurrencyName",
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominal": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "forQualInvestorFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "name": "name",
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "isin": "isin"
     *   }
     * }
     */
    v1CurrencyResponse: {
      instrument?: components['schemas']['v1Currency'];
    };
    /**
     * @description Информация о выплате.
     * @example {
     *   "declaredDate": "2000-01-23T04:56:07.000Z",
     *   "createdAt": "2000-01-23T04:56:07.000Z",
     *   "recordDate": "2000-01-23T04:56:07.000Z",
     *   "yieldValue": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "closePrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "paymentDate": "2000-01-23T04:56:07.000Z",
     *   "regularity": "regularity",
     *   "dividendNet": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "lastBuyDate": "2000-01-23T04:56:07.000Z",
     *   "dividendType": "dividendType"
     * }
     */
    v1Dividend: {
      dividendNet?: components['schemas']['v1MoneyValue'];
      /** Format: date-time */
      paymentDate?: string;
      /** Format: date-time */
      declaredDate?: string;
      /** Format: date-time */
      lastBuyDate?: string;
      dividendType?: string;
      /** Format: date-time */
      recordDate?: string;
      regularity?: string;
      closePrice?: components['schemas']['v1MoneyValue'];
      yieldValue?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      createdAt?: string;
    };
    /**
     * @description Отчёт "Справка о доходах за пределами РФ".
     * @example {
     *   "issuerCountry": "issuerCountry",
     *   "externalCommission": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "securityName": "securityName",
     *   "dividendGross": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "quantity": "quantity",
     *   "dividendAmount": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "recordDate": "2000-01-23T04:56:07.000Z",
     *   "dividend": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "tax": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "currency": "currency",
     *   "paymentDate": "2000-01-23T04:56:07.000Z",
     *   "isin": "isin"
     * }
     */
    v1DividendsForeignIssuerReport: {
      /** Format: date-time */
      recordDate?: string;
      /** Format: date-time */
      paymentDate?: string;
      securityName?: string;
      isin?: string;
      issuerCountry?: string;
      /** Format: int64 */
      quantity?: string;
      dividend?: components['schemas']['v1Quotation'];
      externalCommission?: components['schemas']['v1Quotation'];
      dividendGross?: components['schemas']['v1Quotation'];
      tax?: components['schemas']['v1Quotation'];
      dividendAmount?: components['schemas']['v1Quotation'];
      currency?: string;
    };
    /**
     * @description Тип действия со списком избранных инструментов.
     * @default EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1EditFavoritesActionType:
      | 'EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED'
      | 'EDIT_FAVORITES_ACTION_TYPE_ADD'
      | 'EDIT_FAVORITES_ACTION_TYPE_DEL';
    /** @description Запрос редактирования списка избранных инструментов. */
    v1EditFavoritesRequest: {
      instruments?: components['schemas']['v1EditFavoritesRequestInstrument'][];
      actionType?: components['schemas']['v1EditFavoritesActionType'];
    };
    /** @description Массив инструментов для редактирования списка избранных инструментов. */
    v1EditFavoritesRequestInstrument: {
      figi?: string;
    };
    /**
     * @description Результат редактирования списка избранных инструментов.
     * @example {
     *   "favoriteInstruments": [
     *     {
     *       "otcFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "isin": "isin"
     *     },
     *     {
     *       "otcFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1EditFavoritesResponse: {
      favoriteInstruments?: components['schemas']['v1FavoriteInstrument'][];
    };
    /**
     * @description Объект передачи информации об инвестиционном фонде.
     * @example {
     *   "releasedDate": "2000-01-23T04:56:07.000Z",
     *   "fixedCommission": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "sector": "sector",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "focusType": "focusType",
     *   "ticker": "ticker",
     *   "forQualInvestorFlag": true,
     *   "liquidityFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "rebalancingFreq": "rebalancingFreq",
     *   "name": "name",
     *   "numShares": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "isin": "isin"
     * }
     */
    v1Etf: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      fixedCommission?: components['schemas']['v1Quotation'];
      focusType?: string;
      /** Format: date-time */
      releasedDate?: string;
      numShares?: components['schemas']['v1Quotation'];
      countryOfRisk?: string;
      countryOfRiskName?: string;
      sector?: string;
      rebalancingFreq?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      liquidityFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
    };
    /**
     * @description Данные по фонду.
     * @example {
     *   "instrument": {
     *     "releasedDate": "2000-01-23T04:56:07.000Z",
     *     "fixedCommission": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "sector": "sector",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "focusType": "focusType",
     *     "ticker": "ticker",
     *     "forQualInvestorFlag": true,
     *     "liquidityFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "rebalancingFreq": "rebalancingFreq",
     *     "name": "name",
     *     "numShares": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "isin": "isin"
     *   }
     * }
     */
    v1EtfResponse: {
      instrument?: components['schemas']['v1Etf'];
    };
    /**
     * @description Данные по фондам.
     * @example {
     *   "instruments": [
     *     {
     *       "releasedDate": "2000-01-23T04:56:07.000Z",
     *       "fixedCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "focusType": "focusType",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "rebalancingFreq": "rebalancingFreq",
     *       "name": "name",
     *       "numShares": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     },
     *     {
     *       "releasedDate": "2000-01-23T04:56:07.000Z",
     *       "fixedCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "focusType": "focusType",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "rebalancingFreq": "rebalancingFreq",
     *       "name": "name",
     *       "numShares": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1EtfsResponse: {
      instruments?: components['schemas']['v1Etf'][];
    };
    /**
     * @description Массив избранных инструментов.
     * @example {
     *   "otcFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "instrumentType": "instrumentType",
     *   "figi": "figi",
     *   "apiTradeAvailableFlag": true,
     *   "isin": "isin"
     * }
     */
    v1FavoriteInstrument: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      instrumentType?: string;
      otcFlag?: boolean;
      apiTradeAvailableFlag?: boolean;
      instrumentKind?: components['schemas']['v1InstrumentType'];
    };
    /** Параметры фильтрации опционов */
    v1FilterOptionsRequest: {
      basicAssetUid?: string;
      basicAssetPositionUid?: string;
    };
    /** @description Запрос на поиск инструментов. */
    v1FindInstrumentRequest: {
      query?: string;
      instrumentKind?: components['schemas']['v1InstrumentType'];
      apiTradeAvailableFlag?: boolean;
    };
    /**
     * @description Результат поиска инструментов.
     * @example {
     *   "instruments": [
     *     {
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "name": "name",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "isin": "isin"
     *     },
     *     {
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "name": "name",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1FindInstrumentResponse: {
      instruments?: components['schemas']['v1InstrumentShort'][];
    };
    /**
     * @description Объект передачи информации о фьючерсе.
     * @example {
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "futuresType": "futuresType",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "sector": "sector",
     *   "expirationDate": "2000-01-23T04:56:07.000Z",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *   "basicAssetSize": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "forQualInvestorFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "assetType": "assetType",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "basicAssetPositionUid": "basicAssetPositionUid",
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "name": "name",
     *   "basicAsset": "basicAsset",
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName"
     * }
     */
    v1Future: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      /** Format: date-time */
      firstTradeDate?: string;
      /** Format: date-time */
      lastTradeDate?: string;
      futuresType?: string;
      assetType?: string;
      basicAsset?: string;
      basicAssetSize?: components['schemas']['v1Quotation'];
      countryOfRisk?: string;
      countryOfRiskName?: string;
      sector?: string;
      /** Format: date-time */
      expirationDate?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      basicAssetPositionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
    };
    /**
     * @description Данные по фьючерсу.
     * @example {
     *   "instrument": {
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "futuresType": "futuresType",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "sector": "sector",
     *     "expirationDate": "2000-01-23T04:56:07.000Z",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *     "basicAssetSize": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "forQualInvestorFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "assetType": "assetType",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "basicAssetPositionUid": "basicAssetPositionUid",
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "name": "name",
     *     "basicAsset": "basicAsset",
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName"
     *   }
     * }
     */
    v1FutureResponse: {
      instrument?: components['schemas']['v1Future'];
    };
    /**
     * @description Данные по фьючерсам.
     * @example {
     *   "instruments": [
     *     {
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "futuresType": "futuresType",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "expirationDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *       "basicAssetSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "assetType": "assetType",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "basicAssetPositionUid": "basicAssetPositionUid",
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "basicAsset": "basicAsset",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName"
     *     },
     *     {
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "futuresType": "futuresType",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "expirationDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *       "basicAssetSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "assetType": "assetType",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "basicAssetPositionUid": "basicAssetPositionUid",
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "basicAsset": "basicAsset",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName"
     *     }
     *   ]
     * }
     */
    v1FuturesResponse: {
      instruments?: components['schemas']['v1Future'][];
    };
    v1GenerateBrokerReportRequest: {
      accountId?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * @example {
     *   "taskId": "taskId"
     * }
     */
    v1GenerateBrokerReportResponse: {
      taskId?: string;
    };
    /** @description Объект запроса формирования отчёта "Справка о доходах за пределами РФ". */
    v1GenerateDividendsForeignIssuerReportRequest: {
      accountId?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * @description Объект результата задачи запуска формирования отчёта "Справка о доходах за пределами РФ".
     * @example {
     *   "taskId": "taskId"
     * }
     */
    v1GenerateDividendsForeignIssuerReportResponse: {
      taskId?: string;
    };
    /** @description Запрос получения счетов пользователя. */
    v1GetAccountsRequest: Record<string, never>;
    /**
     * @description Список счетов пользователя.
     * @example {
     *   "accounts": [
     *     {
     *       "openedDate": "2000-01-23T04:56:07.000Z",
     *       "closedDate": "2000-01-23T04:56:07.000Z",
     *       "name": "name",
     *       "id": "id"
     *     },
     *     {
     *       "openedDate": "2000-01-23T04:56:07.000Z",
     *       "closedDate": "2000-01-23T04:56:07.000Z",
     *       "name": "name",
     *       "id": "id"
     *     }
     *   ]
     * }
     */
    v1GetAccountsResponse: {
      /** @description Массив счетов клиента. */
      accounts?: components['schemas']['v1Account'][];
    };
    /** Запрос НКД по облигации */
    v1GetAccruedInterestsRequest: {
      figi?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * НКД облигации
     * @example {
     *   "accruedInterests": [
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "valuePercent": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "value": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "valuePercent": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "value": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ]
     * }
     */
    v1GetAccruedInterestsResponse: {
      accruedInterests?: components['schemas']['v1AccruedInterest'][];
    };
    /** @description Запрос купонов по облигации. */
    v1GetBondCouponsRequest: {
      figi?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * @description Купоны по облигации.
     * @example {
     *   "events": [
     *     {
     *       "fixDate": "2000-01-23T04:56:07.000Z",
     *       "couponPeriod": 0,
     *       "couponNumber": "couponNumber",
     *       "couponEndDate": "2000-01-23T04:56:07.000Z",
     *       "figi": "figi",
     *       "couponDate": "2000-01-23T04:56:07.000Z",
     *       "couponStartDate": "2000-01-23T04:56:07.000Z",
     *       "payOneBond": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "fixDate": "2000-01-23T04:56:07.000Z",
     *       "couponPeriod": 0,
     *       "couponNumber": "couponNumber",
     *       "couponEndDate": "2000-01-23T04:56:07.000Z",
     *       "figi": "figi",
     *       "couponDate": "2000-01-23T04:56:07.000Z",
     *       "couponStartDate": "2000-01-23T04:56:07.000Z",
     *       "payOneBond": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     }
     *   ]
     * }
     */
    v1GetBondCouponsResponse: {
      events?: components['schemas']['v1Coupon'][];
    };
    /** @description Запрос бренда. */
    v1GetBrandRequest: {
      id?: string;
    };
    /** @description Запрос списка брендов. */
    v1GetBrandsRequest: Record<string, never>;
    /**
     * @description Список брендов.
     * @example {
     *   "brands": [
     *     {
     *       "uid": "uid",
     *       "name": "name",
     *       "description": "description",
     *       "company": "company",
     *       "sector": "sector",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "info": "info",
     *       "countryOfRisk": "countryOfRisk"
     *     },
     *     {
     *       "uid": "uid",
     *       "name": "name",
     *       "description": "description",
     *       "company": "company",
     *       "sector": "sector",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "info": "info",
     *       "countryOfRisk": "countryOfRisk"
     *     }
     *   ]
     * }
     */
    v1GetBrandsResponse: {
      brands?: components['schemas']['v1Brand'][];
    };
    v1GetBrokerReportRequest: {
      taskId?: string;
      /** Format: int32 */
      page?: number;
    };
    /**
     * @example {
     *   "brokerReport": [
     *     {
     *       "exchangeClearingCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "separateAgreementDate": "separateAgreementDate",
     *       "orderId": "orderId",
     *       "figi": "figi",
     *       "executeSign": "executeSign",
     *       "brokerCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "repoRate": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "orderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "aciValue": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "secValueDate": "2000-01-23T04:56:07.000Z",
     *       "direction": "direction",
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "quantity": "quantity",
     *       "deliveryType": "deliveryType",
     *       "tradeDatetime": "2000-01-23T04:56:07.000Z",
     *       "exchangeCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "brokerStatus": "brokerStatus",
     *       "totalOrderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "separateAgreementNumber": "separateAgreementNumber",
     *       "clearValueDate": "2000-01-23T04:56:07.000Z",
     *       "name": "name",
     *       "exchange": "exchange",
     *       "separateAgreementType": "separateAgreementType",
     *       "tradeId": "tradeId",
     *       "party": "party"
     *     },
     *     {
     *       "exchangeClearingCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "separateAgreementDate": "separateAgreementDate",
     *       "orderId": "orderId",
     *       "figi": "figi",
     *       "executeSign": "executeSign",
     *       "brokerCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "repoRate": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "orderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "aciValue": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "secValueDate": "2000-01-23T04:56:07.000Z",
     *       "direction": "direction",
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "quantity": "quantity",
     *       "deliveryType": "deliveryType",
     *       "tradeDatetime": "2000-01-23T04:56:07.000Z",
     *       "exchangeCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "brokerStatus": "brokerStatus",
     *       "totalOrderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "separateAgreementNumber": "separateAgreementNumber",
     *       "clearValueDate": "2000-01-23T04:56:07.000Z",
     *       "name": "name",
     *       "exchange": "exchange",
     *       "separateAgreementType": "separateAgreementType",
     *       "tradeId": "tradeId",
     *       "party": "party"
     *     }
     *   ],
     *   "pagesCount": 6,
     *   "page": 1,
     *   "itemsCount": 0
     * }
     */
    v1GetBrokerReportResponse: {
      brokerReport?: components['schemas']['v1BrokerReport'][];
      /** Format: int32 */
      itemsCount?: number;
      /** Format: int32 */
      pagesCount?: number;
      /** Format: int32 */
      page?: number;
    };
    /** @description Запрос исторических свечей. */
    v1GetCandlesRequest: {
      figi?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
      interval?: components['schemas']['v1CandleInterval'];
      instrumentId?: string;
    };
    /**
     * @description Список свечей.
     * @example {
     *   "candles": [
     *     {
     *       "volume": "volume",
     *       "high": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "low": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "time": "2000-01-23T04:56:07.000Z",
     *       "close": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "open": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "isComplete": true
     *     },
     *     {
     *       "volume": "volume",
     *       "high": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "low": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "time": "2000-01-23T04:56:07.000Z",
     *       "close": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "open": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "isComplete": true
     *     }
     *   ]
     * }
     */
    v1GetCandlesResponse: {
      candles?: components['schemas']['v1HistoricCandle'][];
    };
    /** @description Запрос цен закрытия торговой сессии по инструментам. */
    v1GetClosePricesRequest: {
      instruments?: components['schemas']['v1InstrumentClosePriceRequest'][];
    };
    /**
     * @description Цены закрытия торговой сессии по инструментам.
     * @example {
     *   "closePrices": [
     *     {
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1GetClosePricesResponse: {
      closePrices?: components['schemas']['v1InstrumentClosePriceResponse'][];
    };
    /** @description Запрос справочника стран. */
    v1GetCountriesRequest: Record<string, never>;
    /**
     * @description Справочник стран.
     * @example {
     *   "countries": [
     *     {
     *       "alfaTwo": "alfaTwo",
     *       "alfaThree": "alfaThree",
     *       "name": "name",
     *       "nameBrief": "nameBrief"
     *     },
     *     {
     *       "alfaTwo": "alfaTwo",
     *       "alfaThree": "alfaThree",
     *       "name": "name",
     *       "nameBrief": "nameBrief"
     *     }
     *   ]
     * }
     */
    v1GetCountriesResponse: {
      countries?: components['schemas']['v1CountryResponse'][];
    };
    /** @description Объект запроса сформированного отчёта "Справка о доходах за пределами РФ". */
    v1GetDividendsForeignIssuerReportRequest: {
      taskId?: string;
      /** Format: int32 */
      page?: number;
    };
    /**
     * @example {
     *   "pagesCount": 6,
     *   "page": 1,
     *   "dividendsForeignIssuerReport": [
     *     {
     *       "issuerCountry": "issuerCountry",
     *       "externalCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "securityName": "securityName",
     *       "dividendGross": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "quantity": "quantity",
     *       "dividendAmount": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "recordDate": "2000-01-23T04:56:07.000Z",
     *       "dividend": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "tax": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "paymentDate": "2000-01-23T04:56:07.000Z",
     *       "isin": "isin"
     *     },
     *     {
     *       "issuerCountry": "issuerCountry",
     *       "externalCommission": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "securityName": "securityName",
     *       "dividendGross": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "quantity": "quantity",
     *       "dividendAmount": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "recordDate": "2000-01-23T04:56:07.000Z",
     *       "dividend": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "tax": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "paymentDate": "2000-01-23T04:56:07.000Z",
     *       "isin": "isin"
     *     }
     *   ],
     *   "itemsCount": 0
     * }
     */
    v1GetDividendsForeignIssuerReportResponse: {
      dividendsForeignIssuerReport?: components['schemas']['v1DividendsForeignIssuerReport'][];
      /** Format: int32 */
      itemsCount?: number;
      /** Format: int32 */
      pagesCount?: number;
      /** Format: int32 */
      page?: number;
    };
    v1GetDividendsForeignIssuerRequest: {
      generateDivForeignIssuerReport?: components['schemas']['v1GenerateDividendsForeignIssuerReportRequest'];
      getDivForeignIssuerReport?: components['schemas']['v1GetDividendsForeignIssuerReportRequest'];
    };
    /**
     * @example {
     *   "generateDivForeignIssuerReportResponse": {
     *     "taskId": "taskId"
     *   },
     *   "divForeignIssuerReport": {
     *     "pagesCount": 6,
     *     "page": 1,
     *     "dividendsForeignIssuerReport": [
     *       {
     *         "issuerCountry": "issuerCountry",
     *         "externalCommission": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "securityName": "securityName",
     *         "dividendGross": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "quantity": "quantity",
     *         "dividendAmount": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "recordDate": "2000-01-23T04:56:07.000Z",
     *         "dividend": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "tax": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "currency": "currency",
     *         "paymentDate": "2000-01-23T04:56:07.000Z",
     *         "isin": "isin"
     *       },
     *       {
     *         "issuerCountry": "issuerCountry",
     *         "externalCommission": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "securityName": "securityName",
     *         "dividendGross": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "quantity": "quantity",
     *         "dividendAmount": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "recordDate": "2000-01-23T04:56:07.000Z",
     *         "dividend": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "tax": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "currency": "currency",
     *         "paymentDate": "2000-01-23T04:56:07.000Z",
     *         "isin": "isin"
     *       }
     *     ],
     *     "itemsCount": 0
     *   }
     * }
     */
    v1GetDividendsForeignIssuerResponse: {
      generateDivForeignIssuerReportResponse?: components['schemas']['v1GenerateDividendsForeignIssuerReportResponse'];
      divForeignIssuerReport?: components['schemas']['v1GetDividendsForeignIssuerReportResponse'];
    };
    /** @description Запрос дивидендов. */
    v1GetDividendsRequest: {
      figi?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * @description Дивиденды.
     * @example {
     *   "dividends": [
     *     {
     *       "declaredDate": "2000-01-23T04:56:07.000Z",
     *       "createdAt": "2000-01-23T04:56:07.000Z",
     *       "recordDate": "2000-01-23T04:56:07.000Z",
     *       "yieldValue": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "closePrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "paymentDate": "2000-01-23T04:56:07.000Z",
     *       "regularity": "regularity",
     *       "dividendNet": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lastBuyDate": "2000-01-23T04:56:07.000Z",
     *       "dividendType": "dividendType"
     *     },
     *     {
     *       "declaredDate": "2000-01-23T04:56:07.000Z",
     *       "createdAt": "2000-01-23T04:56:07.000Z",
     *       "recordDate": "2000-01-23T04:56:07.000Z",
     *       "yieldValue": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "closePrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "paymentDate": "2000-01-23T04:56:07.000Z",
     *       "regularity": "regularity",
     *       "dividendNet": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lastBuyDate": "2000-01-23T04:56:07.000Z",
     *       "dividendType": "dividendType"
     *     }
     *   ]
     * }
     */
    v1GetDividendsResponse: {
      dividends?: components['schemas']['v1Dividend'][];
    };
    /** @description Запрос списка избранных инструментов, входные параметры не требуются. */
    v1GetFavoritesRequest: Record<string, never>;
    /**
     * @description В ответ передаётся список избранных инструментов в качестве массива.
     * @example {
     *   "favoriteInstruments": [
     *     {
     *       "otcFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "isin": "isin"
     *     },
     *     {
     *       "otcFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "instrumentType": "instrumentType",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true,
     *       "isin": "isin"
     *     }
     *   ]
     * }
     */
    v1GetFavoritesResponse: {
      favoriteInstruments?: components['schemas']['v1FavoriteInstrument'][];
    };
    /** Запрос информации о фьючерсе */
    v1GetFuturesMarginRequest: {
      figi?: string;
    };
    /**
     * Данные по фьючерсу
     * @example {
     *   "initialMarginOnBuy": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "initialMarginOnSell": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "minPriceIncrementAmount": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1GetFuturesMarginResponse: {
      initialMarginOnBuy?: components['schemas']['v1MoneyValue'];
      initialMarginOnSell?: components['schemas']['v1MoneyValue'];
      minPriceIncrement?: components['schemas']['v1Quotation'];
      minPriceIncrementAmount?: components['schemas']['v1Quotation'];
    };
    /** @description Запрос информации о пользователе. */
    v1GetInfoRequest: Record<string, never>;
    /**
     * @description Информация о пользователе.
     * @example {
     *   "qualifiedForWorkWith": [
     *     "qualifiedForWorkWith",
     *     "qualifiedForWorkWith"
     *   ],
     *   "qualStatus": true,
     *   "premStatus": true,
     *   "tariff": "tariff"
     * }
     */
    v1GetInfoResponse: {
      premStatus?: boolean;
      qualStatus?: boolean;
      qualifiedForWorkWith?: string[];
      tariff?: string;
    };
    /** @description Запрос получения цен последних сделок. */
    v1GetLastPricesRequest: {
      figi?: string[];
      instrumentId?: string[];
    };
    /**
     * @description Список цен последних сделок.
     * @example {
     *   "lastPrices": [
     *     {
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1GetLastPricesResponse: {
      lastPrices?: components['schemas']['v1LastPrice'][];
    };
    /** @description Запрос обезличенных сделок за последний час. */
    v1GetLastTradesRequest: {
      figi?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
      instrumentId?: string;
    };
    /**
     * @description Обезличенных сделок за последний час.
     * @example {
     *   "trades": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1GetLastTradesResponse: {
      trades?: components['schemas']['v1Trade'][];
    };
    /** Запрос маржинальных показателей по счёту */
    v1GetMarginAttributesRequest: {
      /** @description Идентификатор счёта пользователя. */
      accountId?: string;
    };
    /**
     * @description Маржинальные показатели по счёту.
     * @example {
     *   "amountOfMissingFunds": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "correctedMargin": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "liquidPortfolio": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "fundsSufficiencyLevel": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "startingMargin": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "minimalMargin": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1GetMarginAttributesResponse: {
      liquidPortfolio?: components['schemas']['v1MoneyValue'];
      startingMargin?: components['schemas']['v1MoneyValue'];
      minimalMargin?: components['schemas']['v1MoneyValue'];
      fundsSufficiencyLevel?: components['schemas']['v1Quotation'];
      amountOfMissingFunds?: components['schemas']['v1MoneyValue'];
      correctedMargin?: components['schemas']['v1MoneyValue'];
    };
    /** @description Запрос активных подписок. */
    v1GetMySubscriptions: Record<string, never>;
    /** @description Запрос списка операций по счёту с пагинацией. */
    v1GetOperationsByCursorRequest: {
      accountId?: string;
      instrumentId?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
      cursor?: string;
      /** Format: int32 */
      limit?: number;
      operationTypes?: components['schemas']['v1OperationType'][];
      state?: components['schemas']['v1OperationState'];
      withoutCommissions?: boolean;
      withoutTrades?: boolean;
      withoutOvernights?: boolean;
    };
    /**
     * @description Список операций по счёту с пагинацией.
     * @example {
     *   "nextCursor": "nextCursor",
     *   "hasNext": true,
     *   "items": [
     *     {
     *       "cursor": "cursor",
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "assetUid": "assetUid",
     *       "brokerAccountId": "brokerAccountId",
     *       "accruedInt": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "description": "description",
     *       "figi": "figi",
     *       "cancelDateTime": "2000-01-23T04:56:07.000Z",
     *       "tradesInfo": {
     *         "trades": [
     *           {
     *             "date": "2000-01-23T04:56:07.000Z",
     *             "quantity": "quantity",
     *             "yieldRelative": {
     *               "nano": 6,
     *               "units": "units"
     *             },
     *             "price": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             },
     *             "num": "num",
     *             "yield": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             }
     *           },
     *           {
     *             "date": "2000-01-23T04:56:07.000Z",
     *             "quantity": "quantity",
     *             "yieldRelative": {
     *               "nano": 6,
     *               "units": "units"
     *             },
     *             "price": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             },
     *             "num": "num",
     *             "yield": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             }
     *           }
     *         ]
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "yield": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "payment": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "commission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "id": "id",
     *       "quantityRest": "quantityRest",
     *       "cancelReason": "cancelReason",
     *       "instrumentType": "instrumentType",
     *       "quantity": "quantity",
     *       "parentOperationId": "parentOperationId",
     *       "positionUid": "positionUid",
     *       "quantityDone": "quantityDone",
     *       "yieldRelative": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "name": "name"
     *     },
     *     {
     *       "cursor": "cursor",
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "assetUid": "assetUid",
     *       "brokerAccountId": "brokerAccountId",
     *       "accruedInt": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "description": "description",
     *       "figi": "figi",
     *       "cancelDateTime": "2000-01-23T04:56:07.000Z",
     *       "tradesInfo": {
     *         "trades": [
     *           {
     *             "date": "2000-01-23T04:56:07.000Z",
     *             "quantity": "quantity",
     *             "yieldRelative": {
     *               "nano": 6,
     *               "units": "units"
     *             },
     *             "price": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             },
     *             "num": "num",
     *             "yield": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             }
     *           },
     *           {
     *             "date": "2000-01-23T04:56:07.000Z",
     *             "quantity": "quantity",
     *             "yieldRelative": {
     *               "nano": 6,
     *               "units": "units"
     *             },
     *             "price": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             },
     *             "num": "num",
     *             "yield": {
     *               "nano": 5,
     *               "currency": "currency",
     *               "units": "units"
     *             }
     *           }
     *         ]
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "yield": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "payment": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "commission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "id": "id",
     *       "quantityRest": "quantityRest",
     *       "cancelReason": "cancelReason",
     *       "instrumentType": "instrumentType",
     *       "quantity": "quantity",
     *       "parentOperationId": "parentOperationId",
     *       "positionUid": "positionUid",
     *       "quantityDone": "quantityDone",
     *       "yieldRelative": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "name": "name"
     *     }
     *   ]
     * }
     */
    v1GetOperationsByCursorResponse: {
      hasNext?: boolean;
      nextCursor?: string;
      items?: components['schemas']['v1OperationItem'][];
    };
    /** @description Запрос стакана. */
    v1GetOrderBookRequest: {
      figi?: string;
      /** Format: int32 */
      depth?: number;
      instrumentId?: string;
    };
    /**
     * @description Информация о стакане.
     * @example {
     *   "depth": 0,
     *   "lastPriceTs": "2000-01-23T04:56:07.000Z",
     *   "asks": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "orderbookTs": "2000-01-23T04:56:07.000Z",
     *   "instrumentUid": "instrumentUid",
     *   "bids": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "limitUp": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "figi": "figi",
     *   "closePrice": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "limitDown": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "closePriceTs": "2000-01-23T04:56:07.000Z",
     *   "lastPrice": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1GetOrderBookResponse: {
      figi?: string;
      /** Format: int32 */
      depth?: number;
      bids?: components['schemas']['v1Order'][];
      asks?: components['schemas']['v1Order'][];
      lastPrice?: components['schemas']['v1Quotation'];
      closePrice?: components['schemas']['v1Quotation'];
      limitUp?: components['schemas']['v1Quotation'];
      limitDown?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      lastPriceTs?: string;
      /** Format: date-time */
      closePriceTs?: string;
      /** Format: date-time */
      orderbookTs?: string;
      instrumentUid?: string;
    };
    /** @description Запрос получения статуса торгового поручения. */
    v1GetOrderStateRequest: {
      accountId?: string;
      orderId?: string;
    };
    /** @description Запрос получения списка активных торговых поручений. */
    v1GetOrdersRequest: {
      accountId?: string;
    };
    /**
     * @description Список активных торговых поручений.
     * @example {
     *   "orders": [
     *     {
     *       "orderId": "orderId",
     *       "figi": "figi",
     *       "initialOrderPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "initialCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsExecuted": "lotsExecuted",
     *       "totalOrderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsRequested": "lotsRequested",
     *       "instrumentUid": "instrumentUid",
     *       "stages": [
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         },
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         }
     *       ],
     *       "orderRequestId": "orderRequestId",
     *       "executedOrderPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "executedCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "initialSecurityPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "serviceCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "orderDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "orderId": "orderId",
     *       "figi": "figi",
     *       "initialOrderPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "initialCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsExecuted": "lotsExecuted",
     *       "totalOrderAmount": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsRequested": "lotsRequested",
     *       "instrumentUid": "instrumentUid",
     *       "stages": [
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         },
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         }
     *       ],
     *       "orderRequestId": "orderRequestId",
     *       "executedOrderPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "executedCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "initialSecurityPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "serviceCommission": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currency": "currency",
     *       "orderDate": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1GetOrdersResponse: {
      orders?: components['schemas']['v1OrderState'][];
    };
    /** @description Запрос получения списка активных стоп-заявок. */
    v1GetStopOrdersRequest: {
      accountId?: string;
    };
    /**
     * @description Список активных стоп-заявок.
     * @example {
     *   "stopOrders": [
     *     {
     *       "activationDateTime": "2000-01-23T04:56:07.000Z",
     *       "stopPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsRequested": "lotsRequested",
     *       "expirationTime": "2000-01-23T04:56:07.000Z",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "currency": "currency",
     *       "stopOrderId": "stopOrderId",
     *       "createDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "activationDateTime": "2000-01-23T04:56:07.000Z",
     *       "stopPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "lotsRequested": "lotsRequested",
     *       "expirationTime": "2000-01-23T04:56:07.000Z",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "currency": "currency",
     *       "stopOrderId": "stopOrderId",
     *       "createDate": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1GetStopOrdersResponse: {
      stopOrders?: components['schemas']['v1StopOrder'][];
    };
    v1GetStrategiesRequest: {
      strategyId?: string;
    };
    /**
     * @example {
     *   "strategies": [
     *     {
     *       "strategyName": "strategyName",
     *       "strategyDescription": "strategyDescription",
     *       "strategyUrl": "strategyUrl",
     *       "strategyId": "strategyId"
     *     },
     *     {
     *       "strategyName": "strategyName",
     *       "strategyDescription": "strategyDescription",
     *       "strategyUrl": "strategyUrl",
     *       "strategyId": "strategyId"
     *     }
     *   ]
     * }
     */
    v1GetStrategiesResponse: {
      strategies?: components['schemas']['v1Strategy'][];
    };
    /** @description Запрос получения торгового статуса. */
    v1GetTradingStatusRequest: {
      figi?: string;
      instrumentId?: string;
    };
    /**
     * @description Информация о торговом статусе.
     * @example {
     *   "limitOrderAvailableFlag": true,
     *   "marketOrderAvailableFlag": true,
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "apiTradeAvailableFlag": true
     * }
     */
    v1GetTradingStatusResponse: {
      figi?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      limitOrderAvailableFlag?: boolean;
      marketOrderAvailableFlag?: boolean;
      apiTradeAvailableFlag?: boolean;
      instrumentUid?: string;
    };
    /** @description Запрос получения торгового статуса. */
    v1GetTradingStatusesRequest: {
      instrumentId?: string[];
    };
    /**
     * @description Информация о торговом статусе.
     * @example {
     *   "tradingStatuses": [
     *     {
     *       "limitOrderAvailableFlag": true,
     *       "marketOrderAvailableFlag": true,
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true
     *     },
     *     {
     *       "limitOrderAvailableFlag": true,
     *       "marketOrderAvailableFlag": true,
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "apiTradeAvailableFlag": true
     *     }
     *   ]
     * }
     */
    v1GetTradingStatusesResponse: {
      tradingStatuses?: components['schemas']['v1GetTradingStatusResponse'][];
    };
    /** @description Запрос текущих лимитов пользователя. */
    v1GetUserTariffRequest: Record<string, never>;
    /**
     * @description Текущие лимиты пользователя.
     * @example {
     *   "unaryLimits": [
     *     {
     *       "limitPerMinute": 0,
     *       "methods": [
     *         "methods",
     *         "methods"
     *       ]
     *     },
     *     {
     *       "limitPerMinute": 0,
     *       "methods": [
     *         "methods",
     *         "methods"
     *       ]
     *     }
     *   ],
     *   "streamLimits": [
     *     {
     *       "streams": [
     *         "streams",
     *         "streams"
     *       ],
     *       "limit": 6,
     *       "open": 1
     *     },
     *     {
     *       "streams": [
     *         "streams",
     *         "streams"
     *       ],
     *       "limit": 6,
     *       "open": 1
     *     }
     *   ]
     * }
     */
    v1GetUserTariffResponse: {
      unaryLimits?: components['schemas']['v1UnaryLimit'][];
      streamLimits?: components['schemas']['v1StreamLimit'][];
    };
    /**
     * @description Информация о свече.
     * @example {
     *   "volume": "volume",
     *   "high": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "low": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "time": "2000-01-23T04:56:07.000Z",
     *   "close": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "open": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "isComplete": true
     * }
     */
    v1HistoricCandle: {
      open?: components['schemas']['v1Quotation'];
      high?: components['schemas']['v1Quotation'];
      low?: components['schemas']['v1Quotation'];
      close?: components['schemas']['v1Quotation'];
      /** Format: int64 */
      volume?: string;
      /** Format: date-time */
      time?: string;
      isComplete?: boolean;
    };
    /** @description Запрос подписки на торговый статус. */
    v1InfoInstrument: {
      figi?: string;
      instrumentId?: string;
    };
    /**
     * @description Статус подписки.
     * @example {
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi"
     * }
     */
    v1InfoSubscription: {
      figi?: string;
      subscriptionStatus?: components['schemas']['v1SubscriptionStatus'];
      instrumentUid?: string;
    };
    /**
     * @description Объект передачи основной информации об инструменте.
     * @example {
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "instrumentType": "instrumentType",
     *   "forQualInvestorFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "name": "name",
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "isin": "isin"
     * }
     */
    v1Instrument: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      countryOfRisk?: string;
      countryOfRiskName?: string;
      instrumentType?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      instrumentKind?: components['schemas']['v1InstrumentType'];
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
    };
    /** @description Запрос цен закрытия торговой сессии по инструменту. */
    v1InstrumentClosePriceRequest: {
      instrumentId?: string;
    };
    /**
     * @description Цена закрытия торговой сессии по инструменту.
     * @example {
     *   "price": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1InstrumentClosePriceResponse: {
      figi?: string;
      instrumentUid?: string;
      price?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      time?: string;
    };
    /**
     * Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
     * @default INSTRUMENT_ID_UNSPECIFIED
     * @enum {string}
     */
    v1InstrumentIdType:
      | 'INSTRUMENT_ID_UNSPECIFIED'
      | 'INSTRUMENT_ID_TYPE_FIGI'
      | 'INSTRUMENT_ID_TYPE_TICKER'
      | 'INSTRUMENT_ID_TYPE_UID'
      | 'INSTRUMENT_ID_TYPE_POSITION_UID';
    /**
     * @description Связь с другим инструментом.
     * @example {
     *   "instrumentUid": "instrumentUid",
     *   "type": "type"
     * }
     */
    v1InstrumentLink: {
      type?: string;
      instrumentUid?: string;
    };
    /** @description Запрос получения инструмента по идентификатору. */
    v1InstrumentRequest: {
      idType?: components['schemas']['v1InstrumentIdType'];
      classCode?: string;
      id?: string;
    };
    /**
     * @description Данные по инструменту.
     * @example {
     *   "instrument": {
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "instrumentType": "instrumentType",
     *     "forQualInvestorFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "name": "name",
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "isin": "isin"
     *   }
     * }
     */
    v1InstrumentResponse: {
      instrument?: components['schemas']['v1Instrument'];
    };
    /**
     * @description Краткая информация об инструменте.
     * @example {
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "instrumentType": "instrumentType",
     *   "forQualInvestorFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "figi": "figi",
     *   "apiTradeAvailableFlag": true,
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "name": "name",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "isin": "isin"
     * }
     */
    v1InstrumentShort: {
      isin?: string;
      figi?: string;
      ticker?: string;
      classCode?: string;
      instrumentType?: string;
      name?: string;
      uid?: string;
      positionUid?: string;
      instrumentKind?: components['schemas']['v1InstrumentType'];
      apiTradeAvailableFlag?: boolean;
      forIisFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
    };
    /**
     * @description Статус запрашиваемых инструментов.
     * @default INSTRUMENT_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1InstrumentStatus: 'INSTRUMENT_STATUS_UNSPECIFIED' | 'INSTRUMENT_STATUS_BASE' | 'INSTRUMENT_STATUS_ALL';
    /**
     * @description Тип инструмента.
     * @default INSTRUMENT_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1InstrumentType:
      | 'INSTRUMENT_TYPE_UNSPECIFIED'
      | 'INSTRUMENT_TYPE_BOND'
      | 'INSTRUMENT_TYPE_SHARE'
      | 'INSTRUMENT_TYPE_CURRENCY'
      | 'INSTRUMENT_TYPE_ETF'
      | 'INSTRUMENT_TYPE_FUTURES'
      | 'INSTRUMENT_TYPE_SP'
      | 'INSTRUMENT_TYPE_OPTION'
      | 'INSTRUMENT_TYPE_CLEARING_CERTIFICATE';
    /** @description Запрос получения инструментов. */
    v1InstrumentsRequest: {
      instrumentStatus?: components['schemas']['v1InstrumentStatus'];
    };
    /**
     * @description Информация о цене последней сделки.
     * @example {
     *   "price": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1LastPrice: {
      figi?: string;
      price?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      time?: string;
      instrumentUid?: string;
    };
    /** @description Запрос подписки на последнюю цену. */
    v1LastPriceInstrument: {
      figi?: string;
      instrumentId?: string;
    };
    /**
     * @description Статус подписки на цену последней сделки.
     * @example {
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi"
     * }
     */
    v1LastPriceSubscription: {
      figi?: string;
      subscriptionStatus?: components['schemas']['v1SubscriptionStatus'];
      instrumentUid?: string;
    };
    /** @description Запрос подписки или отписки на определённые биржевые данные. */
    v1MarketDataRequest: {
      subscribeCandlesRequest?: components['schemas']['v1SubscribeCandlesRequest'];
      subscribeOrderBookRequest?: components['schemas']['v1SubscribeOrderBookRequest'];
      subscribeTradesRequest?: components['schemas']['v1SubscribeTradesRequest'];
      subscribeInfoRequest?: components['schemas']['v1SubscribeInfoRequest'];
      subscribeLastPriceRequest?: components['schemas']['v1SubscribeLastPriceRequest'];
      /** @description Запрос активных подписок. */
      getMySubscriptions?: Record<string, never>;
    };
    /**
     * @description Пакет биржевой информации по подписке.
     * @example {
     *   "subscribeInfoResponse": {
     *     "infoSubscriptions": [
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "trackingId": "trackingId"
     *   },
     *   "trade": {
     *     "quantity": "quantity",
     *     "price": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "instrumentUid": "instrumentUid",
     *     "figi": "figi",
     *     "time": "2000-01-23T04:56:07.000Z"
     *   },
     *   "subscribeOrderBookResponse": {
     *     "orderBookSubscriptions": [
     *       {
     *         "depth": 0,
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "depth": 0,
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "trackingId": "trackingId"
     *   },
     *   "ping": {
     *     "time": "2000-01-23T04:56:07.000Z"
     *   },
     *   "candle": {
     *     "volume": "volume",
     *     "high": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "lastTradeTs": "2000-01-23T04:56:07.000Z",
     *     "low": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "instrumentUid": "instrumentUid",
     *     "figi": "figi",
     *     "time": "2000-01-23T04:56:07.000Z",
     *     "close": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "open": {
     *       "nano": 6,
     *       "units": "units"
     *     }
     *   },
     *   "orderbook": {
     *     "depth": 6,
     *     "asks": [
     *       {
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       },
     *       {
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       }
     *     ],
     *     "instrumentUid": "instrumentUid",
     *     "bids": [
     *       {
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       },
     *       {
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       }
     *     ],
     *     "limitUp": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "figi": "figi",
     *     "time": "2000-01-23T04:56:07.000Z",
     *     "limitDown": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "isConsistent": true
     *   },
     *   "subscribeTradesResponse": {
     *     "tradeSubscriptions": [
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "trackingId": "trackingId"
     *   },
     *   "tradingStatus": {
     *     "limitOrderAvailableFlag": true,
     *     "marketOrderAvailableFlag": true,
     *     "instrumentUid": "instrumentUid",
     *     "figi": "figi",
     *     "time": "2000-01-23T04:56:07.000Z"
     *   },
     *   "subscribeCandlesResponse": {
     *     "candlesSubscriptions": [
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "trackingId": "trackingId"
     *   },
     *   "subscribeLastPriceResponse": {
     *     "lastPriceSubscriptions": [
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "instrumentUid": "instrumentUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "trackingId": "trackingId"
     *   },
     *   "lastPrice": {
     *     "price": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "instrumentUid": "instrumentUid",
     *     "figi": "figi",
     *     "time": "2000-01-23T04:56:07.000Z"
     *   }
     * }
     */
    v1MarketDataResponse: {
      subscribeCandlesResponse?: components['schemas']['v1SubscribeCandlesResponse'];
      subscribeOrderBookResponse?: components['schemas']['v1SubscribeOrderBookResponse'];
      subscribeTradesResponse?: components['schemas']['v1SubscribeTradesResponse'];
      subscribeInfoResponse?: components['schemas']['v1SubscribeInfoResponse'];
      candle?: components['schemas']['v1Candle'];
      trade?: components['schemas']['v1Trade'];
      orderbook?: components['schemas']['v1OrderBook'];
      tradingStatus?: components['schemas']['v1TradingStatus'];
      ping?: components['schemas']['v1Ping'];
      subscribeLastPriceResponse?: components['schemas']['v1SubscribeLastPriceResponse'];
      lastPrice?: components['schemas']['v1LastPrice'];
    };
    v1MarketDataServerSideStreamRequest: {
      subscribeCandlesRequest?: components['schemas']['v1SubscribeCandlesRequest'];
      subscribeOrderBookRequest?: components['schemas']['v1SubscribeOrderBookRequest'];
      subscribeTradesRequest?: components['schemas']['v1SubscribeTradesRequest'];
      subscribeInfoRequest?: components['schemas']['v1SubscribeInfoRequest'];
      subscribeLastPriceRequest?: components['schemas']['v1SubscribeLastPriceRequest'];
    };
    /**
     * Денежная сумма в определенной валюте
     * @example {
     *   "nano": 5,
     *   "currency": "currency",
     *   "units": "units"
     * }
     */
    v1MoneyValue: {
      /** строковый ISO-код валюты */
      currency?: string;
      /**
       * целая часть суммы, может быть отрицательным числом
       * Format: int64
       */
      units?: string;
      /**
       * дробная часть суммы, может быть отрицательным числом
       * Format: int32
       */
      nano?: number;
    };
    /** @description Запрос открытия счёта в песочнице. */
    v1OpenSandboxAccountRequest: Record<string, never>;
    /**
     * @description Номер открытого счёта в песочнице.
     * @example {
     *   "accountId": "accountId"
     * }
     */
    v1OpenSandboxAccountResponse: {
      accountId?: string;
    };
    /**
     * @description Данные по операции.
     * @example {
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "assetUid": "assetUid",
     *   "instrumentType": "instrumentType",
     *   "quantity": "quantity",
     *   "parentOperationId": "parentOperationId",
     *   "trades": [
     *     {
     *       "dateTime": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     },
     *     {
     *       "dateTime": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     }
     *   ],
     *   "positionUid": "positionUid",
     *   "figi": "figi",
     *   "type": "type",
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "currency": "currency",
     *   "payment": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "id": "id",
     *   "quantityRest": "quantityRest"
     * }
     */
    v1Operation: {
      id?: string;
      parentOperationId?: string;
      currency?: string;
      payment?: components['schemas']['v1MoneyValue'];
      price?: components['schemas']['v1MoneyValue'];
      state?: components['schemas']['v1OperationState'];
      /** Format: int64 */
      quantity?: string;
      /** Format: int64 */
      quantityRest?: string;
      figi?: string;
      instrumentType?: string;
      /** Format: date-time */
      date?: string;
      type?: string;
      operationType?: components['schemas']['v1OperationType'];
      trades?: components['schemas']['v1OperationTrade'][];
      assetUid?: string;
      positionUid?: string;
      instrumentUid?: string;
    };
    /**
     * @description Данные об операции.
     * @example {
     *   "cursor": "cursor",
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "assetUid": "assetUid",
     *   "brokerAccountId": "brokerAccountId",
     *   "accruedInt": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "description": "description",
     *   "figi": "figi",
     *   "cancelDateTime": "2000-01-23T04:56:07.000Z",
     *   "tradesInfo": {
     *     "trades": [
     *       {
     *         "date": "2000-01-23T04:56:07.000Z",
     *         "quantity": "quantity",
     *         "yieldRelative": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "price": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "num": "num",
     *         "yield": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         }
     *       },
     *       {
     *         "date": "2000-01-23T04:56:07.000Z",
     *         "quantity": "quantity",
     *         "yieldRelative": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "price": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "num": "num",
     *         "yield": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         }
     *       }
     *     ]
     *   },
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "yield": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "payment": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "commission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "id": "id",
     *   "quantityRest": "quantityRest",
     *   "cancelReason": "cancelReason",
     *   "instrumentType": "instrumentType",
     *   "quantity": "quantity",
     *   "parentOperationId": "parentOperationId",
     *   "positionUid": "positionUid",
     *   "quantityDone": "quantityDone",
     *   "yieldRelative": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "name": "name"
     * }
     */
    v1OperationItem: {
      cursor?: string;
      brokerAccountId?: string;
      id?: string;
      parentOperationId?: string;
      name?: string;
      /** Format: date-time */
      date?: string;
      type?: components['schemas']['v1OperationType'];
      description?: string;
      state?: components['schemas']['v1OperationState'];
      instrumentUid?: string;
      figi?: string;
      instrumentType?: string;
      instrumentKind?: components['schemas']['v1InstrumentType'];
      positionUid?: string;
      payment?: components['schemas']['v1MoneyValue'];
      price?: components['schemas']['v1MoneyValue'];
      commission?: components['schemas']['v1MoneyValue'];
      yield?: components['schemas']['v1MoneyValue'];
      yieldRelative?: components['schemas']['v1Quotation'];
      accruedInt?: components['schemas']['v1MoneyValue'];
      /** Format: int64 */
      quantity?: string;
      /** Format: int64 */
      quantityRest?: string;
      /** Format: int64 */
      quantityDone?: string;
      /** Format: date-time */
      cancelDateTime?: string;
      cancelReason?: string;
      tradesInfo?: components['schemas']['v1OperationItemTrades'];
      assetUid?: string;
    };
    /**
     * @description Сделка по операции.
     * @example {
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "quantity": "quantity",
     *   "yieldRelative": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "num": "num",
     *   "yield": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1OperationItemTrade: {
      num?: string;
      /** Format: date-time */
      date?: string;
      /** Format: int64 */
      quantity?: string;
      price?: components['schemas']['v1MoneyValue'];
      yield?: components['schemas']['v1MoneyValue'];
      yieldRelative?: components['schemas']['v1Quotation'];
    };
    /**
     * @description Массив с информацией о сделках.
     * @example {
     *   "trades": [
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "yieldRelative": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "num": "num",
     *       "yield": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "yieldRelative": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "num": "num",
     *       "yield": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     }
     *   ]
     * }
     */
    v1OperationItemTrades: {
      trades?: components['schemas']['v1OperationItemTrade'][];
    };
    /**
     * @description Статус запрашиваемых операций.
     * @default OPERATION_STATE_UNSPECIFIED
     * @enum {string}
     */
    v1OperationState:
      | 'OPERATION_STATE_UNSPECIFIED'
      | 'OPERATION_STATE_EXECUTED'
      | 'OPERATION_STATE_CANCELED'
      | 'OPERATION_STATE_PROGRESS';
    /**
     * @description Сделка по операции.
     * @example {
     *   "dateTime": "2000-01-23T04:56:07.000Z",
     *   "quantity": "quantity",
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "tradeId": "tradeId"
     * }
     */
    v1OperationTrade: {
      tradeId?: string;
      /** Format: date-time */
      dateTime?: string;
      /** Format: int64 */
      quantity?: string;
      price?: components['schemas']['v1MoneyValue'];
    };
    /**
     * @description Тип операции.
     * @default OPERATION_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1OperationType:
      | 'OPERATION_TYPE_UNSPECIFIED'
      | 'OPERATION_TYPE_INPUT'
      | 'OPERATION_TYPE_BOND_TAX'
      | 'OPERATION_TYPE_OUTPUT_SECURITIES'
      | 'OPERATION_TYPE_OVERNIGHT'
      | 'OPERATION_TYPE_TAX'
      | 'OPERATION_TYPE_BOND_REPAYMENT_FULL'
      | 'OPERATION_TYPE_SELL_CARD'
      | 'OPERATION_TYPE_DIVIDEND_TAX'
      | 'OPERATION_TYPE_OUTPUT'
      | 'OPERATION_TYPE_BOND_REPAYMENT'
      | 'OPERATION_TYPE_TAX_CORRECTION'
      | 'OPERATION_TYPE_SERVICE_FEE'
      | 'OPERATION_TYPE_BENEFIT_TAX'
      | 'OPERATION_TYPE_MARGIN_FEE'
      | 'OPERATION_TYPE_BUY'
      | 'OPERATION_TYPE_BUY_CARD'
      | 'OPERATION_TYPE_INPUT_SECURITIES'
      | 'OPERATION_TYPE_SELL_MARGIN'
      | 'OPERATION_TYPE_BROKER_FEE'
      | 'OPERATION_TYPE_BUY_MARGIN'
      | 'OPERATION_TYPE_DIVIDEND'
      | 'OPERATION_TYPE_SELL'
      | 'OPERATION_TYPE_COUPON'
      | 'OPERATION_TYPE_SUCCESS_FEE'
      | 'OPERATION_TYPE_DIVIDEND_TRANSFER'
      | 'OPERATION_TYPE_ACCRUING_VARMARGIN'
      | 'OPERATION_TYPE_WRITING_OFF_VARMARGIN'
      | 'OPERATION_TYPE_DELIVERY_BUY'
      | 'OPERATION_TYPE_DELIVERY_SELL'
      | 'OPERATION_TYPE_TRACK_MFEE'
      | 'OPERATION_TYPE_TRACK_PFEE'
      | 'OPERATION_TYPE_TAX_PROGRESSIVE'
      | 'OPERATION_TYPE_BOND_TAX_PROGRESSIVE'
      | 'OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE'
      | 'OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE'
      | 'OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE'
      | 'OPERATION_TYPE_TAX_REPO_PROGRESSIVE'
      | 'OPERATION_TYPE_TAX_REPO'
      | 'OPERATION_TYPE_TAX_REPO_HOLD'
      | 'OPERATION_TYPE_TAX_REPO_REFUND'
      | 'OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE'
      | 'OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE'
      | 'OPERATION_TYPE_DIV_EXT'
      | 'OPERATION_TYPE_TAX_CORRECTION_COUPON'
      | 'OPERATION_TYPE_CASH_FEE'
      | 'OPERATION_TYPE_OUT_FEE'
      | 'OPERATION_TYPE_OUT_STAMP_DUTY'
      | 'OPERATION_TYPE_OUTPUT_SWIFT'
      | 'OPERATION_TYPE_INPUT_SWIFT'
      | 'OPERATION_TYPE_OUTPUT_ACQUIRING'
      | 'OPERATION_TYPE_INPUT_ACQUIRING'
      | 'OPERATION_TYPE_OUTPUT_PENALTY'
      | 'OPERATION_TYPE_ADVICE_FEE'
      | 'OPERATION_TYPE_TRANS_IIS_BS'
      | 'OPERATION_TYPE_TRANS_BS_BS'
      | 'OPERATION_TYPE_OUT_MULTI'
      | 'OPERATION_TYPE_INP_MULTI'
      | 'OPERATION_TYPE_OVER_PLACEMENT'
      | 'OPERATION_TYPE_OVER_COM'
      | 'OPERATION_TYPE_OVER_INCOME'
      | 'OPERATION_TYPE_OPTION_EXPIRATION';
    /** @description Запрос получения списка операций по счёту. */
    v1OperationsRequest: {
      accountId?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
      state?: components['schemas']['v1OperationState'];
      figi?: string;
    };
    /**
     * @description Список операций.
     * @example {
     *   "operations": [
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "assetUid": "assetUid",
     *       "instrumentType": "instrumentType",
     *       "quantity": "quantity",
     *       "parentOperationId": "parentOperationId",
     *       "trades": [
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         },
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         }
     *       ],
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "type": "type",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "currency": "currency",
     *       "payment": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "id": "id",
     *       "quantityRest": "quantityRest"
     *     },
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "assetUid": "assetUid",
     *       "instrumentType": "instrumentType",
     *       "quantity": "quantity",
     *       "parentOperationId": "parentOperationId",
     *       "trades": [
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         },
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         }
     *       ],
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "type": "type",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "currency": "currency",
     *       "payment": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "id": "id",
     *       "quantityRest": "quantityRest"
     *     }
     *   ]
     * }
     */
    v1OperationsResponse: {
      operations?: components['schemas']['v1Operation'][];
    };
    /**
     * @description Опцион.
     * @example {
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "sector": "sector",
     *   "expirationDate": "2000-01-23T04:56:07.000Z",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *   "basicAssetSize": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "forQualInvestorFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "assetType": "assetType",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "basicAssetPositionUid": "basicAssetPositionUid",
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "settlementCurrency": "settlementCurrency",
     *   "name": "name",
     *   "basicAsset": "basicAsset",
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "strikePrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1Option: {
      uid?: string;
      positionUid?: string;
      ticker?: string;
      classCode?: string;
      basicAssetPositionUid?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      realExchange?: components['schemas']['v1RealExchange'];
      direction?: components['schemas']['v1OptionDirection'];
      paymentType?: components['schemas']['v1OptionPaymentType'];
      style?: components['schemas']['v1OptionStyle'];
      settlementType?: components['schemas']['v1OptionSettlementType'];
      name?: string;
      currency?: string;
      settlementCurrency?: string;
      assetType?: string;
      basicAsset?: string;
      exchange?: string;
      countryOfRisk?: string;
      countryOfRiskName?: string;
      sector?: string;
      /** Format: int32 */
      lot?: number;
      basicAssetSize?: components['schemas']['v1Quotation'];
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      minPriceIncrement?: components['schemas']['v1Quotation'];
      strikePrice?: components['schemas']['v1MoneyValue'];
      /** Format: date-time */
      expirationDate?: string;
      /** Format: date-time */
      firstTradeDate?: string;
      /** Format: date-time */
      lastTradeDate?: string;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
      shortEnabledFlag?: boolean;
      forIisFlag?: boolean;
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      apiTradeAvailableFlag?: boolean;
    };
    /**
     * @description Тип опциона по направлению сделки.
     * @default OPTION_DIRECTION_UNSPECIFIED
     * @enum {string}
     */
    v1OptionDirection: 'OPTION_DIRECTION_UNSPECIFIED' | 'OPTION_DIRECTION_PUT' | 'OPTION_DIRECTION_CALL';
    /**
     * @description Тип расчетов по опциону.
     * @default OPTION_PAYMENT_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1OptionPaymentType:
      | 'OPTION_PAYMENT_TYPE_UNSPECIFIED'
      | 'OPTION_PAYMENT_TYPE_PREMIUM'
      | 'OPTION_PAYMENT_TYPE_MARGINAL';
    /**
     * @description Данные по опциону.
     * @example {
     *   "instrument": {
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "sector": "sector",
     *     "expirationDate": "2000-01-23T04:56:07.000Z",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *     "basicAssetSize": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "forQualInvestorFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "assetType": "assetType",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "basicAssetPositionUid": "basicAssetPositionUid",
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "settlementCurrency": "settlementCurrency",
     *     "name": "name",
     *     "basicAsset": "basicAsset",
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "strikePrice": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   }
     * }
     */
    v1OptionResponse: {
      instrument?: components['schemas']['v1Option'];
    };
    /**
     * @description Тип опциона по способу исполнения.
     * @default OPTION_EXECUTION_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1OptionSettlementType:
      | 'OPTION_EXECUTION_TYPE_UNSPECIFIED'
      | 'OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY'
      | 'OPTION_EXECUTION_TYPE_CASH_SETTLEMENT';
    /**
     * @description Тип опциона по стилю.
     * @default OPTION_STYLE_UNSPECIFIED
     * @enum {string}
     */
    v1OptionStyle: 'OPTION_STYLE_UNSPECIFIED' | 'OPTION_STYLE_AMERICAN' | 'OPTION_STYLE_EUROPEAN';
    /**
     * @description Данные по опционам.
     * @example {
     *   "instruments": [
     *     {
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "expirationDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *       "basicAssetSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "assetType": "assetType",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "basicAssetPositionUid": "basicAssetPositionUid",
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "settlementCurrency": "settlementCurrency",
     *       "name": "name",
     *       "basicAsset": "basicAsset",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "strikePrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lastTradeDate": "2000-01-23T04:56:07.000Z",
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "expirationDate": "2000-01-23T04:56:07.000Z",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "firstTradeDate": "2000-01-23T04:56:07.000Z",
     *       "basicAssetSize": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "forQualInvestorFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "assetType": "assetType",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "basicAssetPositionUid": "basicAssetPositionUid",
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "settlementCurrency": "settlementCurrency",
     *       "name": "name",
     *       "basicAsset": "basicAsset",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "strikePrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     }
     *   ]
     * }
     */
    v1OptionsResponse: {
      instruments?: components['schemas']['v1Option'][];
    };
    /**
     * @description Массив предложений/спроса.
     * @example {
     *   "quantity": "quantity",
     *   "price": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1Order: {
      price?: components['schemas']['v1Quotation'];
      /** Format: int64 */
      quantity?: string;
    };
    /**
     * @description Пакет стаканов в рамках стрима.
     * @example {
     *   "depth": 6,
     *   "asks": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "instrumentUid": "instrumentUid",
     *   "bids": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "limitUp": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z",
     *   "limitDown": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "isConsistent": true
     * }
     */
    v1OrderBook: {
      figi?: string;
      /** Format: int32 */
      depth?: number;
      isConsistent?: boolean;
      bids?: components['schemas']['v1Order'][];
      asks?: components['schemas']['v1Order'][];
      /** Format: date-time */
      time?: string;
      limitUp?: components['schemas']['v1Quotation'];
      limitDown?: components['schemas']['v1Quotation'];
      instrumentUid?: string;
    };
    /** @description Запрос подписки на стаканы. */
    v1OrderBookInstrument: {
      figi?: string;
      /** Format: int32 */
      depth?: number;
      instrumentId?: string;
    };
    /**
     * @description Статус подписки.
     * @example {
     *   "depth": 0,
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi"
     * }
     */
    v1OrderBookSubscription: {
      figi?: string;
      /** Format: int32 */
      depth?: number;
      subscriptionStatus?: components['schemas']['v1SubscriptionStatus'];
      instrumentUid?: string;
    };
    /**
     * @description Направление операции.
     * @default ORDER_DIRECTION_UNSPECIFIED
     * @enum {string}
     */
    v1OrderDirection: 'ORDER_DIRECTION_UNSPECIFIED' | 'ORDER_DIRECTION_BUY' | 'ORDER_DIRECTION_SELL';
    /**
     * Текущий статус заявки (поручения)
     * @default EXECUTION_REPORT_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1OrderExecutionReportStatus:
      | 'EXECUTION_REPORT_STATUS_UNSPECIFIED'
      | 'EXECUTION_REPORT_STATUS_FILL'
      | 'EXECUTION_REPORT_STATUS_REJECTED'
      | 'EXECUTION_REPORT_STATUS_CANCELLED'
      | 'EXECUTION_REPORT_STATUS_NEW'
      | 'EXECUTION_REPORT_STATUS_PARTIALLYFILL';
    /**
     * @description Сделки в рамках торгового поручения.
     * @example {
     *   "quantity": "quantity",
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "tradeId": "tradeId"
     * }
     */
    v1OrderStage: {
      price?: components['schemas']['v1MoneyValue'];
      /** Format: int64 */
      quantity?: string;
      tradeId?: string;
    };
    /**
     * @description Информация о торговом поручении.
     * @example {
     *   "orderId": "orderId",
     *   "figi": "figi",
     *   "initialOrderPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "initialCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "averagePositionPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "lotsExecuted": "lotsExecuted",
     *   "totalOrderAmount": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "lotsRequested": "lotsRequested",
     *   "instrumentUid": "instrumentUid",
     *   "stages": [
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     },
     *     {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     }
     *   ],
     *   "orderRequestId": "orderRequestId",
     *   "executedOrderPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "executedCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "initialSecurityPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "serviceCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "currency": "currency",
     *   "orderDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1OrderState: {
      orderId?: string;
      executionReportStatus?: components['schemas']['v1OrderExecutionReportStatus'];
      /** Format: int64 */
      lotsRequested?: string;
      /** Format: int64 */
      lotsExecuted?: string;
      initialOrderPrice?: components['schemas']['v1MoneyValue'];
      executedOrderPrice?: components['schemas']['v1MoneyValue'];
      totalOrderAmount?: components['schemas']['v1MoneyValue'];
      averagePositionPrice?: components['schemas']['v1MoneyValue'];
      initialCommission?: components['schemas']['v1MoneyValue'];
      executedCommission?: components['schemas']['v1MoneyValue'];
      figi?: string;
      direction?: components['schemas']['v1OrderDirection'];
      initialSecurityPrice?: components['schemas']['v1MoneyValue'];
      stages?: components['schemas']['v1OrderStage'][];
      serviceCommission?: components['schemas']['v1MoneyValue'];
      currency?: string;
      orderType?: components['schemas']['v1OrderType'];
      /** Format: date-time */
      orderDate?: string;
      instrumentUid?: string;
      orderRequestId?: string;
    };
    /**
     * @description Информация о сделке.
     * @example {
     *   "dateTime": "2000-01-23T04:56:07.000Z",
     *   "quantity": "quantity",
     *   "price": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "tradeId": "tradeId"
     * }
     */
    v1OrderTrade: {
      /** Format: date-time */
      dateTime?: string;
      price?: components['schemas']['v1Quotation'];
      /** Format: int64 */
      quantity?: string;
      tradeId?: string;
    };
    /**
     * @description Информация об исполнении торгового поручения.
     * @example {
     *   "createdAt": "2000-01-23T04:56:07.000Z",
     *   "accountId": "accountId",
     *   "orderId": "orderId",
     *   "instrumentUid": "instrumentUid",
     *   "trades": [
     *     {
     *       "dateTime": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     },
     *     {
     *       "dateTime": "2000-01-23T04:56:07.000Z",
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "tradeId": "tradeId"
     *     }
     *   ],
     *   "figi": "figi"
     * }
     */
    v1OrderTrades: {
      orderId?: string;
      /** Format: date-time */
      createdAt?: string;
      direction?: components['schemas']['v1OrderDirection'];
      figi?: string;
      trades?: components['schemas']['v1OrderTrade'][];
      accountId?: string;
      instrumentUid?: string;
    };
    /**
     * @description Тип заявки.
     * @default ORDER_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1OrderType: 'ORDER_TYPE_UNSPECIFIED' | 'ORDER_TYPE_LIMIT' | 'ORDER_TYPE_MARKET' | 'ORDER_TYPE_BESTPRICE';
    /**
     * @description Проверка активности стрима.
     * @example {
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1Ping: {
      /**
       * Format: date-time
       * @description Время проверки.
       */
      time?: string;
    };
    /**
     * @description Позиции портфеля.
     * @example {
     *   "varMargin": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "instrumentType": "instrumentType",
     *   "quantity": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "averagePositionPricePt": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "expectedYieldFifo": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "averagePositionPriceFifo": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "currentPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "positionUid": "positionUid",
     *   "figi": "figi",
     *   "quantityLots": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "blockedLots": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "averagePositionPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "blocked": true,
     *   "instrumentUid": "instrumentUid",
     *   "currentNkd": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "expectedYield": {
     *     "nano": 6,
     *     "units": "units"
     *   }
     * }
     */
    v1PortfolioPosition: {
      figi?: string;
      instrumentType?: string;
      quantity?: components['schemas']['v1Quotation'];
      averagePositionPrice?: components['schemas']['v1MoneyValue'];
      expectedYield?: components['schemas']['v1Quotation'];
      currentNkd?: components['schemas']['v1MoneyValue'];
      averagePositionPricePt?: components['schemas']['v1Quotation'];
      currentPrice?: components['schemas']['v1MoneyValue'];
      averagePositionPriceFifo?: components['schemas']['v1MoneyValue'];
      quantityLots?: components['schemas']['v1Quotation'];
      blocked?: boolean;
      blockedLots?: components['schemas']['v1Quotation'];
      positionUid?: string;
      instrumentUid?: string;
      varMargin?: components['schemas']['v1MoneyValue'];
      expectedYieldFifo?: components['schemas']['v1Quotation'];
    };
    /** @description Запрос получения текущего портфеля по счёту. */
    v1PortfolioRequest: {
      accountId?: string;
      currency?: components['schemas']['PortfolioRequestCurrencyRequest'];
    };
    /**
     * @description Текущий портфель по счёту.
     * @example {
     *   "totalAmountBonds": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "totalAmountFutures": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "accountId": "accountId",
     *   "totalAmountCurrencies": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "totalAmountSp": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "expectedYield": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "positions": [
     *     {
     *       "varMargin": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentType": "instrumentType",
     *       "quantity": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPricePt": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expectedYieldFifo": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPriceFifo": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currentPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "quantityLots": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "blockedLots": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "blocked": true,
     *       "instrumentUid": "instrumentUid",
     *       "currentNkd": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "expectedYield": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "varMargin": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentType": "instrumentType",
     *       "quantity": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPricePt": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expectedYieldFifo": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPriceFifo": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "currentPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "quantityLots": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "blockedLots": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "blocked": true,
     *       "instrumentUid": "instrumentUid",
     *       "currentNkd": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "expectedYield": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "totalAmountShares": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "totalAmountEtf": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "totalAmountPortfolio": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "virtualPositions": [
     *     {
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentType": "instrumentType",
     *       "quantity": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expectedYieldFifo": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPriceFifo": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "currentPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "figi": "figi",
     *       "expectedYield": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expireDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "averagePositionPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentType": "instrumentType",
     *       "quantity": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expectedYieldFifo": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "averagePositionPriceFifo": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "currentPrice": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "figi": "figi",
     *       "expectedYield": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "expireDate": "2000-01-23T04:56:07.000Z"
     *     }
     *   ],
     *   "totalAmountOptions": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1PortfolioResponse: {
      totalAmountShares?: components['schemas']['v1MoneyValue'];
      totalAmountBonds?: components['schemas']['v1MoneyValue'];
      totalAmountEtf?: components['schemas']['v1MoneyValue'];
      totalAmountCurrencies?: components['schemas']['v1MoneyValue'];
      totalAmountFutures?: components['schemas']['v1MoneyValue'];
      expectedYield?: components['schemas']['v1Quotation'];
      positions?: components['schemas']['v1PortfolioPosition'][];
      accountId?: string;
      totalAmountOptions?: components['schemas']['v1MoneyValue'];
      totalAmountSp?: components['schemas']['v1MoneyValue'];
      totalAmountPortfolio?: components['schemas']['v1MoneyValue'];
      virtualPositions?: components['schemas']['v1VirtualPortfolioPosition'][];
    };
    /** @description Запрос установки stream-соединения. */
    v1PortfolioStreamRequest: {
      accounts?: string[];
    };
    /**
     * @description Информация по позициям и доходностям портфелей.
     * @example {
     *   "subscriptions": {
     *     "accounts": [
     *       {
     *         "accountId": "accountId"
     *       },
     *       {
     *         "accountId": "accountId"
     *       }
     *     ]
     *   },
     *   "portfolio": {
     *     "totalAmountBonds": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "totalAmountFutures": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "accountId": "accountId",
     *     "totalAmountCurrencies": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "totalAmountSp": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "expectedYield": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "positions": [
     *       {
     *         "varMargin": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentType": "instrumentType",
     *         "quantity": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPricePt": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expectedYieldFifo": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPriceFifo": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "currentPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "quantityLots": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "blockedLots": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "blocked": true,
     *         "instrumentUid": "instrumentUid",
     *         "currentNkd": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "expectedYield": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       },
     *       {
     *         "varMargin": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentType": "instrumentType",
     *         "quantity": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPricePt": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expectedYieldFifo": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPriceFifo": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "currentPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "quantityLots": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "blockedLots": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "blocked": true,
     *         "instrumentUid": "instrumentUid",
     *         "currentNkd": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "expectedYield": {
     *           "nano": 6,
     *           "units": "units"
     *         }
     *       }
     *     ],
     *     "totalAmountShares": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "totalAmountEtf": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "totalAmountPortfolio": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "virtualPositions": [
     *       {
     *         "averagePositionPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentType": "instrumentType",
     *         "quantity": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expectedYieldFifo": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPriceFifo": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "currentPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "figi": "figi",
     *         "expectedYield": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expireDate": "2000-01-23T04:56:07.000Z"
     *       },
     *       {
     *         "averagePositionPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentType": "instrumentType",
     *         "quantity": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expectedYieldFifo": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "averagePositionPriceFifo": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "currentPrice": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "figi": "figi",
     *         "expectedYield": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "expireDate": "2000-01-23T04:56:07.000Z"
     *       }
     *     ],
     *     "totalAmountOptions": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   },
     *   "ping": {
     *     "time": "2000-01-23T04:56:07.000Z"
     *   }
     * }
     */
    v1PortfolioStreamResponse: {
      subscriptions?: components['schemas']['v1PortfolioSubscriptionResult'];
      portfolio?: components['schemas']['v1PortfolioResponse'];
      ping?: components['schemas']['v1Ping'];
    };
    /**
     * @description Объект результата подписки.
     * @example {
     *   "accounts": [
     *     {
     *       "accountId": "accountId"
     *     },
     *     {
     *       "accountId": "accountId"
     *     }
     *   ]
     * }
     */
    v1PortfolioSubscriptionResult: {
      accounts?: components['schemas']['v1AccountSubscriptionStatus'][];
    };
    /**
     * @description Результат подписки.
     * @default PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1PortfolioSubscriptionStatus:
      | 'PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED'
      | 'PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS'
      | 'PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND'
      | 'PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR';
    /**
     * @description Данные о позиции портфеля.
     * @example {
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "accountId": "accountId",
     *   "money": [
     *     {
     *       "availableValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "blockedValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     },
     *     {
     *       "availableValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "blockedValue": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     }
     *   ],
     *   "options": [
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid"
     *     },
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid"
     *     }
     *   ],
     *   "futures": [
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "securities": [
     *     {
     *       "instrumentType": "instrumentType",
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "exchangeBlocked": true
     *     },
     *     {
     *       "instrumentType": "instrumentType",
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "exchangeBlocked": true
     *     }
     *   ]
     * }
     */
    v1PositionData: {
      accountId?: string;
      money?: components['schemas']['v1PositionsMoney'][];
      securities?: components['schemas']['v1PositionsSecurities'][];
      futures?: components['schemas']['v1PositionsFutures'][];
      options?: components['schemas']['v1PositionsOptions'][];
      /** Format: date-time */
      date?: string;
    };
    /**
     * @description Результат подписки.
     * @default POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1PositionsAccountSubscriptionStatus:
      | 'POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED'
      | 'POSITIONS_SUBSCRIPTION_STATUS_SUCCESS'
      | 'POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND'
      | 'POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR';
    /**
     * @description Баланс фьючерса.
     * @example {
     *   "blocked": "blocked",
     *   "balance": "balance",
     *   "instrumentUid": "instrumentUid",
     *   "positionUid": "positionUid",
     *   "figi": "figi"
     * }
     */
    v1PositionsFutures: {
      figi?: string;
      /** Format: int64 */
      blocked?: string;
      /** Format: int64 */
      balance?: string;
      positionUid?: string;
      instrumentUid?: string;
    };
    /**
     * @description Валютная позиция портфеля.
     * @example {
     *   "availableValue": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "blockedValue": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1PositionsMoney: {
      availableValue?: components['schemas']['v1MoneyValue'];
      blockedValue?: components['schemas']['v1MoneyValue'];
    };
    /**
     * @description Баланс опциона.
     * @example {
     *   "blocked": "blocked",
     *   "balance": "balance",
     *   "instrumentUid": "instrumentUid",
     *   "positionUid": "positionUid"
     * }
     */
    v1PositionsOptions: {
      positionUid?: string;
      instrumentUid?: string;
      /** Format: int64 */
      blocked?: string;
      /** Format: int64 */
      balance?: string;
    };
    /** @description Запрос позиций портфеля по счёту. */
    v1PositionsRequest: {
      accountId?: string;
    };
    /**
     * @description Список позиций по счёту.
     * @example {
     *   "limitsLoadingInProgress": true,
     *   "money": [
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   ],
     *   "blocked": [
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   ],
     *   "options": [
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid"
     *     },
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid"
     *     }
     *   ],
     *   "futures": [
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "securities": [
     *     {
     *       "instrumentType": "instrumentType",
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "exchangeBlocked": true
     *     },
     *     {
     *       "instrumentType": "instrumentType",
     *       "blocked": "blocked",
     *       "balance": "balance",
     *       "instrumentUid": "instrumentUid",
     *       "positionUid": "positionUid",
     *       "figi": "figi",
     *       "exchangeBlocked": true
     *     }
     *   ]
     * }
     */
    v1PositionsResponse: {
      money?: components['schemas']['v1MoneyValue'][];
      blocked?: components['schemas']['v1MoneyValue'][];
      securities?: components['schemas']['v1PositionsSecurities'][];
      limitsLoadingInProgress?: boolean;
      futures?: components['schemas']['v1PositionsFutures'][];
      options?: components['schemas']['v1PositionsOptions'][];
    };
    /**
     * @description Баланс позиции ценной бумаги.
     * @example {
     *   "instrumentType": "instrumentType",
     *   "blocked": "blocked",
     *   "balance": "balance",
     *   "instrumentUid": "instrumentUid",
     *   "positionUid": "positionUid",
     *   "figi": "figi",
     *   "exchangeBlocked": true
     * }
     */
    v1PositionsSecurities: {
      figi?: string;
      /** Format: int64 */
      blocked?: string;
      /** Format: int64 */
      balance?: string;
      positionUid?: string;
      instrumentUid?: string;
      exchangeBlocked?: boolean;
      instrumentType?: string;
    };
    /** @description Запрос установки stream-соединения позиций. */
    v1PositionsStreamRequest: {
      accounts?: string[];
    };
    /**
     * @description Информация по изменению позиций портфеля.
     * @example {
     *   "subscriptions": {
     *     "accounts": [
     *       {
     *         "accountId": "accountId"
     *       },
     *       {
     *         "accountId": "accountId"
     *       }
     *     ]
     *   },
     *   "ping": {
     *     "time": "2000-01-23T04:56:07.000Z"
     *   },
     *   "position": {
     *     "date": "2000-01-23T04:56:07.000Z",
     *     "accountId": "accountId",
     *     "money": [
     *       {
     *         "availableValue": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "blockedValue": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         }
     *       },
     *       {
     *         "availableValue": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         },
     *         "blockedValue": {
     *           "nano": 5,
     *           "currency": "currency",
     *           "units": "units"
     *         }
     *       }
     *     ],
     *     "options": [
     *       {
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid"
     *       },
     *       {
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid"
     *       }
     *     ],
     *     "futures": [
     *       {
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "figi": "figi"
     *       },
     *       {
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "figi": "figi"
     *       }
     *     ],
     *     "securities": [
     *       {
     *         "instrumentType": "instrumentType",
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "exchangeBlocked": true
     *       },
     *       {
     *         "instrumentType": "instrumentType",
     *         "blocked": "blocked",
     *         "balance": "balance",
     *         "instrumentUid": "instrumentUid",
     *         "positionUid": "positionUid",
     *         "figi": "figi",
     *         "exchangeBlocked": true
     *       }
     *     ]
     *   }
     * }
     */
    v1PositionsStreamResponse: {
      subscriptions?: components['schemas']['v1PositionsSubscriptionResult'];
      position?: components['schemas']['v1PositionData'];
      ping?: components['schemas']['v1Ping'];
    };
    /**
     * @description Объект результата подписки.
     * @example {
     *   "accounts": [
     *     {
     *       "accountId": "accountId"
     *     },
     *     {
     *       "accountId": "accountId"
     *     }
     *   ]
     * }
     */
    v1PositionsSubscriptionResult: {
      accounts?: components['schemas']['v1PositionsSubscriptionStatus'][];
    };
    /**
     * @description Счет клиента.
     * @example {
     *   "accountId": "accountId"
     * }
     */
    v1PositionsSubscriptionStatus: {
      accountId?: string;
      subscriptionStatus?: components['schemas']['v1PositionsAccountSubscriptionStatus'];
    };
    /** @description Запрос выставления торгового поручения. */
    v1PostOrderRequest: {
      figi?: string;
      /** Format: int64 */
      quantity?: string;
      price?: components['schemas']['v1Quotation'];
      direction?: components['schemas']['v1OrderDirection'];
      accountId?: string;
      orderType?: components['schemas']['v1OrderType'];
      orderId?: string;
      instrumentId?: string;
    };
    /**
     * @description Информация о выставлении поручения.
     * @example {
     *   "orderId": "orderId",
     *   "figi": "figi",
     *   "initialOrderPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "initialCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "message": "message",
     *   "lotsExecuted": "lotsExecuted",
     *   "totalOrderAmount": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "lotsRequested": "lotsRequested",
     *   "initialOrderPricePt": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "executedOrderPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "executedCommission": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "initialSecurityPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "aciValue": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1PostOrderResponse: {
      orderId?: string;
      executionReportStatus?: components['schemas']['v1OrderExecutionReportStatus'];
      /** Format: int64 */
      lotsRequested?: string;
      /** Format: int64 */
      lotsExecuted?: string;
      initialOrderPrice?: components['schemas']['v1MoneyValue'];
      executedOrderPrice?: components['schemas']['v1MoneyValue'];
      totalOrderAmount?: components['schemas']['v1MoneyValue'];
      initialCommission?: components['schemas']['v1MoneyValue'];
      executedCommission?: components['schemas']['v1MoneyValue'];
      aciValue?: components['schemas']['v1MoneyValue'];
      figi?: string;
      direction?: components['schemas']['v1OrderDirection'];
      initialSecurityPrice?: components['schemas']['v1MoneyValue'];
      orderType?: components['schemas']['v1OrderType'];
      message?: string;
      initialOrderPricePt?: components['schemas']['v1Quotation'];
      instrumentUid?: string;
    };
    /** @description Запрос выставления стоп-заявки. */
    v1PostStopOrderRequest: {
      figi?: string;
      /** Format: int64 */
      quantity?: string;
      price?: components['schemas']['v1Quotation'];
      stopPrice?: components['schemas']['v1Quotation'];
      direction?: components['schemas']['v1StopOrderDirection'];
      accountId?: string;
      expirationType?: components['schemas']['v1StopOrderExpirationType'];
      stopOrderType?: components['schemas']['v1StopOrderType'];
      /** Format: date-time */
      expireDate?: string;
      instrumentId?: string;
    };
    /**
     * @description Результат выставления стоп-заявки.
     * @example {
     *   "stopOrderId": "stopOrderId"
     * }
     */
    v1PostStopOrderResponse: {
      stopOrderId?: string;
    };
    /**
     * @description Тип цены.
     * @default PRICE_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1PriceType: 'PRICE_TYPE_UNSPECIFIED' | 'PRICE_TYPE_POINT' | 'PRICE_TYPE_CURRENCY';
    /**
     * Котировка - денежная сумма без указания валюты
     * @example {
     *   "nano": 6,
     *   "units": "units"
     * }
     */
    v1Quotation: {
      /**
       * целая часть суммы, может быть отрицательным числом
       * Format: int64
       */
      units?: string;
      /**
       * дробная часть суммы, может быть отрицательным числом
       * Format: int32
       */
      nano?: number;
    };
    /**
     * @description Реальная площадка исполнения расчётов.
     * @default REAL_EXCHANGE_UNSPECIFIED
     * @enum {string}
     */
    v1RealExchange: 'REAL_EXCHANGE_UNSPECIFIED' | 'REAL_EXCHANGE_MOEX' | 'REAL_EXCHANGE_RTS' | 'REAL_EXCHANGE_OTC';
    /** @description Запрос изменения выставленной заявки. */
    v1ReplaceOrderRequest: {
      accountId?: string;
      orderId?: string;
      idempotencyKey?: string;
      /** Format: int64 */
      quantity?: string;
      price?: components['schemas']['v1Quotation'];
      priceType?: components['schemas']['v1PriceType'];
    };
    /**
     * @description Уровень риска облигации.
     * @default RISK_LEVEL_UNSPECIFIED
     * @enum {string}
     */
    v1RiskLevel: 'RISK_LEVEL_UNSPECIFIED' | 'RISK_LEVEL_LOW' | 'RISK_LEVEL_MODERATE' | 'RISK_LEVEL_HIGH';
    /** @description Запрос пополнения счёта в песочнице. */
    v1SandboxPayInRequest: {
      accountId?: string;
      amount?: components['schemas']['v1MoneyValue'];
    };
    /**
     * @description Результат пополнения счёта, текущий баланс.
     * @example {
     *   "balance": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   }
     * }
     */
    v1SandboxPayInResponse: {
      balance?: components['schemas']['v1MoneyValue'];
    };
    /**
     * Режим торгов инструмента
     * @default SECURITY_TRADING_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1SecurityTradingStatus:
      | 'SECURITY_TRADING_STATUS_UNSPECIFIED'
      | 'SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING'
      | 'SECURITY_TRADING_STATUS_OPENING_PERIOD'
      | 'SECURITY_TRADING_STATUS_CLOSING_PERIOD'
      | 'SECURITY_TRADING_STATUS_BREAK_IN_TRADING'
      | 'SECURITY_TRADING_STATUS_NORMAL_TRADING'
      | 'SECURITY_TRADING_STATUS_CLOSING_AUCTION'
      | 'SECURITY_TRADING_STATUS_DARK_POOL_AUCTION'
      | 'SECURITY_TRADING_STATUS_DISCRETE_AUCTION'
      | 'SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD'
      | 'SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE'
      | 'SECURITY_TRADING_STATUS_SESSION_ASSIGNED'
      | 'SECURITY_TRADING_STATUS_SESSION_CLOSE'
      | 'SECURITY_TRADING_STATUS_SESSION_OPEN'
      | 'SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING'
      | 'SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING'
      | 'SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING';
    /**
     * @description Объект передачи информации об акции.
     * @example {
     *   "figi": "figi",
     *   "dshortMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "countryOfRisk": "countryOfRisk",
     *   "lot": 0,
     *   "uid": "uid",
     *   "blockedTcaFlag": true,
     *   "dlong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "nominal": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "sellAvailableFlag": true,
     *   "currency": "currency",
     *   "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *   "sector": "sector",
     *   "buyAvailableFlag": true,
     *   "weekendFlag": true,
     *   "classCode": "classCode",
     *   "ticker": "ticker",
     *   "forQualInvestorFlag": true,
     *   "liquidityFlag": true,
     *   "forIisFlag": true,
     *   "positionUid": "positionUid",
     *   "apiTradeAvailableFlag": true,
     *   "dlongMin": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "shortEnabledFlag": true,
     *   "kshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *   "issueSizePlan": "issueSizePlan",
     *   "minPriceIncrement": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "otcFlag": true,
     *   "klong": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "dshort": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "name": "name",
     *   "issueSize": "issueSize",
     *   "exchange": "exchange",
     *   "countryOfRiskName": "countryOfRiskName",
     *   "divYieldFlag": true,
     *   "isin": "isin",
     *   "ipoDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1Share: {
      figi?: string;
      ticker?: string;
      classCode?: string;
      isin?: string;
      /** Format: int32 */
      lot?: number;
      currency?: string;
      klong?: components['schemas']['v1Quotation'];
      kshort?: components['schemas']['v1Quotation'];
      dlong?: components['schemas']['v1Quotation'];
      dshort?: components['schemas']['v1Quotation'];
      dlongMin?: components['schemas']['v1Quotation'];
      dshortMin?: components['schemas']['v1Quotation'];
      shortEnabledFlag?: boolean;
      name?: string;
      exchange?: string;
      /** Format: date-time */
      ipoDate?: string;
      /** Format: int64 */
      issueSize?: string;
      countryOfRisk?: string;
      countryOfRiskName?: string;
      sector?: string;
      /** Format: int64 */
      issueSizePlan?: string;
      nominal?: components['schemas']['v1MoneyValue'];
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      otcFlag?: boolean;
      buyAvailableFlag?: boolean;
      sellAvailableFlag?: boolean;
      divYieldFlag?: boolean;
      shareType?: components['schemas']['v1ShareType'];
      minPriceIncrement?: components['schemas']['v1Quotation'];
      apiTradeAvailableFlag?: boolean;
      uid?: string;
      realExchange?: components['schemas']['v1RealExchange'];
      positionUid?: string;
      forIisFlag?: boolean;
      forQualInvestorFlag?: boolean;
      weekendFlag?: boolean;
      blockedTcaFlag?: boolean;
      liquidityFlag?: boolean;
      /** Format: date-time */
      first1minCandleDate?: string;
      /** Format: date-time */
      first1dayCandleDate?: string;
    };
    /**
     * @description Данные по акции.
     * @example {
     *   "instrument": {
     *     "figi": "figi",
     *     "dshortMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "countryOfRisk": "countryOfRisk",
     *     "lot": 0,
     *     "uid": "uid",
     *     "blockedTcaFlag": true,
     *     "dlong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "nominal": {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     "sellAvailableFlag": true,
     *     "currency": "currency",
     *     "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *     "sector": "sector",
     *     "buyAvailableFlag": true,
     *     "weekendFlag": true,
     *     "classCode": "classCode",
     *     "ticker": "ticker",
     *     "forQualInvestorFlag": true,
     *     "liquidityFlag": true,
     *     "forIisFlag": true,
     *     "positionUid": "positionUid",
     *     "apiTradeAvailableFlag": true,
     *     "dlongMin": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "shortEnabledFlag": true,
     *     "kshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *     "issueSizePlan": "issueSizePlan",
     *     "minPriceIncrement": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "otcFlag": true,
     *     "klong": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "dshort": {
     *       "nano": 6,
     *       "units": "units"
     *     },
     *     "name": "name",
     *     "issueSize": "issueSize",
     *     "exchange": "exchange",
     *     "countryOfRiskName": "countryOfRiskName",
     *     "divYieldFlag": true,
     *     "isin": "isin",
     *     "ipoDate": "2000-01-23T04:56:07.000Z"
     *   }
     * }
     */
    v1ShareResponse: {
      instrument?: components['schemas']['v1Share'];
    };
    /**
     * @description Тип акций.
     * @default SHARE_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1ShareType:
      | 'SHARE_TYPE_UNSPECIFIED'
      | 'SHARE_TYPE_COMMON'
      | 'SHARE_TYPE_PREFERRED'
      | 'SHARE_TYPE_ADR'
      | 'SHARE_TYPE_GDR'
      | 'SHARE_TYPE_MLP'
      | 'SHARE_TYPE_NY_REG_SHRS'
      | 'SHARE_TYPE_CLOSED_END_FUND'
      | 'SHARE_TYPE_REIT';
    /**
     * @description Данные по акциям.
     * @example {
     *   "instruments": [
     *     {
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "issueSizePlan": "issueSizePlan",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "issueSize": "issueSize",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "divYieldFlag": true,
     *       "isin": "isin",
     *       "ipoDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "figi": "figi",
     *       "dshortMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "countryOfRisk": "countryOfRisk",
     *       "lot": 0,
     *       "uid": "uid",
     *       "blockedTcaFlag": true,
     *       "dlong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "nominal": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "sellAvailableFlag": true,
     *       "currency": "currency",
     *       "first1dayCandleDate": "2000-01-23T04:56:07.000Z",
     *       "sector": "sector",
     *       "buyAvailableFlag": true,
     *       "weekendFlag": true,
     *       "classCode": "classCode",
     *       "ticker": "ticker",
     *       "forQualInvestorFlag": true,
     *       "liquidityFlag": true,
     *       "forIisFlag": true,
     *       "positionUid": "positionUid",
     *       "apiTradeAvailableFlag": true,
     *       "dlongMin": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "shortEnabledFlag": true,
     *       "kshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "first1minCandleDate": "2000-01-23T04:56:07.000Z",
     *       "issueSizePlan": "issueSizePlan",
     *       "minPriceIncrement": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "otcFlag": true,
     *       "klong": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "dshort": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "name": "name",
     *       "issueSize": "issueSize",
     *       "exchange": "exchange",
     *       "countryOfRiskName": "countryOfRiskName",
     *       "divYieldFlag": true,
     *       "isin": "isin",
     *       "ipoDate": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    v1SharesResponse: {
      instruments?: components['schemas']['v1Share'][];
    };
    /**
     * @example {
     *   "price": 0.8008282,
     *   "signalId": "signalId",
     *   "instrumentUid": "instrumentUid",
     *   "lifetime": "lifetime",
     *   "strategyId": "strategyId",
     *   "createDt": "2000-01-23T04:56:07.000Z",
     *   "profit": 6.0274563,
     *   "direction": "direction",
     *   "info": "info"
     * }
     */
    v1Signal: {
      signalId?: string;
      strategyId?: string;
      instrumentUid?: string;
      /** Format: date-time */
      createDt?: string;
      /** Format: int64 */
      lifetime?: string;
      direction?: string;
      /** Format: float */
      price?: number;
      /** Format: float */
      profit?: number;
      info?: string;
    };
    /**
     * @description Информация о стоп-заявке.
     * @example {
     *   "activationDateTime": "2000-01-23T04:56:07.000Z",
     *   "stopPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "lotsRequested": "lotsRequested",
     *   "expirationTime": "2000-01-23T04:56:07.000Z",
     *   "price": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "currency": "currency",
     *   "stopOrderId": "stopOrderId",
     *   "createDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1StopOrder: {
      stopOrderId?: string;
      /** Format: int64 */
      lotsRequested?: string;
      figi?: string;
      direction?: components['schemas']['v1StopOrderDirection'];
      currency?: string;
      orderType?: components['schemas']['v1StopOrderType'];
      /** Format: date-time */
      createDate?: string;
      /** Format: date-time */
      activationDateTime?: string;
      /** Format: date-time */
      expirationTime?: string;
      price?: components['schemas']['v1MoneyValue'];
      stopPrice?: components['schemas']['v1MoneyValue'];
      instrumentUid?: string;
    };
    /**
     * @description Направление сделки стоп-заявки.
     * @default STOP_ORDER_DIRECTION_UNSPECIFIED
     * @enum {string}
     */
    v1StopOrderDirection: 'STOP_ORDER_DIRECTION_UNSPECIFIED' | 'STOP_ORDER_DIRECTION_BUY' | 'STOP_ORDER_DIRECTION_SELL';
    /**
     * @description Тип экспирации стоп-заявке.
     * @default STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1StopOrderExpirationType:
      | 'STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED'
      | 'STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL'
      | 'STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE';
    /**
     * @description Тип стоп-заявки.
     * @default STOP_ORDER_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1StopOrderType:
      | 'STOP_ORDER_TYPE_UNSPECIFIED'
      | 'STOP_ORDER_TYPE_TAKE_PROFIT'
      | 'STOP_ORDER_TYPE_STOP_LOSS'
      | 'STOP_ORDER_TYPE_STOP_LIMIT';
    /**
     * @example {
     *   "strategyName": "strategyName",
     *   "strategyDescription": "strategyDescription",
     *   "strategyUrl": "strategyUrl",
     *   "strategyId": "strategyId"
     * }
     */
    v1Strategy: {
      strategyId?: string;
      strategyName?: string;
      strategyDescription?: string;
      strategyUrl?: string;
    };
    /**
     * @description Лимит stream-соединений.
     * @example {
     *   "streams": [
     *     "streams",
     *     "streams"
     *   ],
     *   "limit": 6,
     *   "open": 1
     * }
     */
    v1StreamLimit: {
      /** Format: int32 */
      limit?: number;
      streams?: string[];
      /** Format: int32 */
      open?: number;
    };
    /**
     * @description Тип структурной ноты.
     * @default SP_TYPE_UNSPECIFIED
     * @enum {string}
     */
    v1StructuredProductType: 'SP_TYPE_UNSPECIFIED' | 'SP_TYPE_DELIVERABLE' | 'SP_TYPE_NON_DELIVERABLE';
    /** @description subscribeCandles | Изменения статуса подписки на свечи. */
    v1SubscribeCandlesRequest: {
      subscriptionAction?: components['schemas']['v1SubscriptionAction'];
      instruments?: components['schemas']['v1CandleInstrument'][];
      waitingClose?: boolean;
    };
    /**
     * @description Результат изменения статус подписки на свечи.
     * @example {
     *   "candlesSubscriptions": [
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "trackingId": "trackingId"
     * }
     */
    v1SubscribeCandlesResponse: {
      trackingId?: string;
      candlesSubscriptions?: components['schemas']['v1CandleSubscription'][];
    };
    /** @description Изменение статуса подписки на торговый статус инструмента. */
    v1SubscribeInfoRequest: {
      subscriptionAction?: components['schemas']['v1SubscriptionAction'];
      instruments?: components['schemas']['v1InfoInstrument'][];
    };
    /**
     * @description Результат изменения статуса подписки на торговый статус.
     * @example {
     *   "infoSubscriptions": [
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "trackingId": "trackingId"
     * }
     */
    v1SubscribeInfoResponse: {
      trackingId?: string;
      infoSubscriptions?: components['schemas']['v1InfoSubscription'][];
    };
    /** @description Изменение статуса подписки на цену последней сделки по инструменту. */
    v1SubscribeLastPriceRequest: {
      subscriptionAction?: components['schemas']['v1SubscriptionAction'];
      instruments?: components['schemas']['v1LastPriceInstrument'][];
    };
    /**
     * @description Результат изменения статуса подписки на цену последней сделки.
     * @example {
     *   "lastPriceSubscriptions": [
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "trackingId": "trackingId"
     * }
     */
    v1SubscribeLastPriceResponse: {
      trackingId?: string;
      lastPriceSubscriptions?: components['schemas']['v1LastPriceSubscription'][];
    };
    /** @description Запрос на изменение статуса подписки на стаканы. */
    v1SubscribeOrderBookRequest: {
      subscriptionAction?: components['schemas']['v1SubscriptionAction'];
      instruments?: components['schemas']['v1OrderBookInstrument'][];
    };
    /**
     * @description Результат изменения статуса подписки на стаканы.
     * @example {
     *   "orderBookSubscriptions": [
     *     {
     *       "depth": 0,
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "depth": 0,
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "trackingId": "trackingId"
     * }
     */
    v1SubscribeOrderBookResponse: {
      trackingId?: string;
      orderBookSubscriptions?: components['schemas']['v1OrderBookSubscription'][];
    };
    /** @description Изменение статуса подписки на поток обезличенных сделок. */
    v1SubscribeTradesRequest: {
      subscriptionAction?: components['schemas']['v1SubscriptionAction'];
      instruments?: components['schemas']['v1TradeInstrument'][];
    };
    /**
     * @description Результат изменения статуса подписки на поток обезличенных сделок.
     * @example {
     *   "tradeSubscriptions": [
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     },
     *     {
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi"
     *     }
     *   ],
     *   "trackingId": "trackingId"
     * }
     */
    v1SubscribeTradesResponse: {
      trackingId?: string;
      tradeSubscriptions?: components['schemas']['v1TradeSubscription'][];
    };
    /**
     * @description Тип операции со списком подписок.
     * @default SUBSCRIPTION_ACTION_UNSPECIFIED
     * @enum {string}
     */
    v1SubscriptionAction:
      | 'SUBSCRIPTION_ACTION_UNSPECIFIED'
      | 'SUBSCRIPTION_ACTION_SUBSCRIBE'
      | 'SUBSCRIPTION_ACTION_UNSUBSCRIBE';
    /**
     * @description Интервал свечи.
     * @default SUBSCRIPTION_INTERVAL_UNSPECIFIED
     * @enum {string}
     */
    v1SubscriptionInterval:
      | 'SUBSCRIPTION_INTERVAL_UNSPECIFIED'
      | 'SUBSCRIPTION_INTERVAL_ONE_MINUTE'
      | 'SUBSCRIPTION_INTERVAL_FIVE_MINUTES';
    /**
     * @description Результат подписки.
     * @default SUBSCRIPTION_STATUS_UNSPECIFIED
     * @enum {string}
     */
    v1SubscriptionStatus:
      | 'SUBSCRIPTION_STATUS_UNSPECIFIED'
      | 'SUBSCRIPTION_STATUS_SUCCESS'
      | 'SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND'
      | 'SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID'
      | 'SUBSCRIPTION_STATUS_DEPTH_IS_INVALID'
      | 'SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID'
      | 'SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED'
      | 'SUBSCRIPTION_STATUS_INTERNAL_ERROR'
      | 'SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS';
    /**
     * @description Информация о сделке.
     * @example {
     *   "quantity": "quantity",
     *   "price": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1Trade: {
      figi?: string;
      direction?: components['schemas']['v1TradeDirection'];
      price?: components['schemas']['v1Quotation'];
      /** Format: int64 */
      quantity?: string;
      /** Format: date-time */
      time?: string;
      instrumentUid?: string;
    };
    /**
     * @description Направление сделки.
     * @default TRADE_DIRECTION_UNSPECIFIED
     * @enum {string}
     */
    v1TradeDirection: 'TRADE_DIRECTION_UNSPECIFIED' | 'TRADE_DIRECTION_BUY' | 'TRADE_DIRECTION_SELL';
    /** @description Запрос подписки на поток обезличенных сделок. */
    v1TradeInstrument: {
      figi?: string;
      instrumentId?: string;
    };
    /**
     * @description Статус подписки.
     * @example {
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi"
     * }
     */
    v1TradeSubscription: {
      figi?: string;
      subscriptionStatus?: components['schemas']['v1SubscriptionStatus'];
      instrumentUid?: string;
    };
    /** @description Запрос установки соединения. */
    v1TradesStreamRequest: {
      accounts?: string[];
    };
    /**
     * @description Информация о торговых поручениях.
     * @example {
     *   "ping": {
     *     "time": "2000-01-23T04:56:07.000Z"
     *   },
     *   "orderTrades": {
     *     "createdAt": "2000-01-23T04:56:07.000Z",
     *     "accountId": "accountId",
     *     "orderId": "orderId",
     *     "instrumentUid": "instrumentUid",
     *     "trades": [
     *       {
     *         "dateTime": "2000-01-23T04:56:07.000Z",
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "tradeId": "tradeId"
     *       },
     *       {
     *         "dateTime": "2000-01-23T04:56:07.000Z",
     *         "quantity": "quantity",
     *         "price": {
     *           "nano": 6,
     *           "units": "units"
     *         },
     *         "tradeId": "tradeId"
     *       }
     *     ],
     *     "figi": "figi"
     *   }
     * }
     */
    v1TradesStreamResponse: {
      orderTrades?: components['schemas']['v1OrderTrades'];
      ping?: components['schemas']['v1Ping'];
    };
    /**
     * @description Информация о времени торгов.
     * @example {
     *   "date": "2000-01-23T04:56:07.000Z",
     *   "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *   "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *   "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *   "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *   "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *   "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *   "isTradingDay": true,
     *   "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *   "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *   "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *   "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *   "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *   "startTime": "2000-01-23T04:56:07.000Z",
     *   "endTime": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1TradingDay: {
      /** Format: date-time */
      date?: string;
      isTradingDay?: boolean;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      /** Format: date-time */
      openingAuctionStartTime?: string;
      /** Format: date-time */
      closingAuctionEndTime?: string;
      /** Format: date-time */
      eveningOpeningAuctionStartTime?: string;
      /** Format: date-time */
      eveningStartTime?: string;
      /** Format: date-time */
      eveningEndTime?: string;
      /** Format: date-time */
      clearingStartTime?: string;
      /** Format: date-time */
      clearingEndTime?: string;
      /** Format: date-time */
      premarketStartTime?: string;
      /** Format: date-time */
      premarketEndTime?: string;
      /** Format: date-time */
      closingAuctionStartTime?: string;
      /** Format: date-time */
      openingAuctionEndTime?: string;
    };
    /**
     * @description Данные по торговой площадке.
     * @example {
     *   "days": [
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *       "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *       "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *       "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *       "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "isTradingDay": true,
     *       "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *       "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *       "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *       "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *       "startTime": "2000-01-23T04:56:07.000Z",
     *       "endTime": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *       "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *       "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *       "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *       "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "isTradingDay": true,
     *       "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *       "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *       "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *       "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *       "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *       "startTime": "2000-01-23T04:56:07.000Z",
     *       "endTime": "2000-01-23T04:56:07.000Z"
     *     }
     *   ],
     *   "exchange": "exchange"
     * }
     */
    v1TradingSchedule: {
      exchange?: string;
      days?: components['schemas']['v1TradingDay'][];
    };
    /** @description Запрос расписания торгов. */
    v1TradingSchedulesRequest: {
      exchange?: string;
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
    };
    /**
     * @description Список торговых площадок.
     * @example {
     *   "exchanges": [
     *     {
     *       "days": [
     *         {
     *           "date": "2000-01-23T04:56:07.000Z",
     *           "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *           "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "isTradingDay": true,
     *           "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *           "startTime": "2000-01-23T04:56:07.000Z",
     *           "endTime": "2000-01-23T04:56:07.000Z"
     *         },
     *         {
     *           "date": "2000-01-23T04:56:07.000Z",
     *           "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *           "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "isTradingDay": true,
     *           "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *           "startTime": "2000-01-23T04:56:07.000Z",
     *           "endTime": "2000-01-23T04:56:07.000Z"
     *         }
     *       ],
     *       "exchange": "exchange"
     *     },
     *     {
     *       "days": [
     *         {
     *           "date": "2000-01-23T04:56:07.000Z",
     *           "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *           "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "isTradingDay": true,
     *           "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *           "startTime": "2000-01-23T04:56:07.000Z",
     *           "endTime": "2000-01-23T04:56:07.000Z"
     *         },
     *         {
     *           "date": "2000-01-23T04:56:07.000Z",
     *           "clearingEndTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "eveningEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketStartTime": "2000-01-23T04:56:07.000Z",
     *           "eveningOpeningAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "isTradingDay": true,
     *           "eveningStartTime": "2000-01-23T04:56:07.000Z",
     *           "openingAuctionEndTime": "2000-01-23T04:56:07.000Z",
     *           "premarketEndTime": "2000-01-23T04:56:07.000Z",
     *           "closingAuctionStartTime": "2000-01-23T04:56:07.000Z",
     *           "clearingStartTime": "2000-01-23T04:56:07.000Z",
     *           "startTime": "2000-01-23T04:56:07.000Z",
     *           "endTime": "2000-01-23T04:56:07.000Z"
     *         }
     *       ],
     *       "exchange": "exchange"
     *     }
     *   ]
     * }
     */
    v1TradingSchedulesResponse: {
      exchanges?: components['schemas']['v1TradingSchedule'][];
    };
    /**
     * @description Пакет изменения торгового статуса.
     * @example {
     *   "limitOrderAvailableFlag": true,
     *   "marketOrderAvailableFlag": true,
     *   "instrumentUid": "instrumentUid",
     *   "figi": "figi",
     *   "time": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1TradingStatus: {
      figi?: string;
      tradingStatus?: components['schemas']['v1SecurityTradingStatus'];
      /** Format: date-time */
      time?: string;
      limitOrderAvailableFlag?: boolean;
      marketOrderAvailableFlag?: boolean;
      instrumentUid?: string;
    };
    /**
     * @description Лимит unary-методов.
     * @example {
     *   "limitPerMinute": 0,
     *   "methods": [
     *     "methods",
     *     "methods"
     *   ]
     * }
     */
    v1UnaryLimit: {
      /** Format: int32 */
      limitPerMinute?: number;
      methods?: string[];
    };
    /**
     * @example {
     *   "averagePositionPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "instrumentType": "instrumentType",
     *   "quantity": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "expectedYieldFifo": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "averagePositionPriceFifo": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "instrumentUid": "instrumentUid",
     *   "positionUid": "positionUid",
     *   "currentPrice": {
     *     "nano": 5,
     *     "currency": "currency",
     *     "units": "units"
     *   },
     *   "figi": "figi",
     *   "expectedYield": {
     *     "nano": 6,
     *     "units": "units"
     *   },
     *   "expireDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    v1VirtualPortfolioPosition: {
      positionUid?: string;
      instrumentUid?: string;
      figi?: string;
      instrumentType?: string;
      quantity?: components['schemas']['v1Quotation'];
      averagePositionPrice?: components['schemas']['v1MoneyValue'];
      expectedYield?: components['schemas']['v1Quotation'];
      expectedYieldFifo?: components['schemas']['v1Quotation'];
      /** Format: date-time */
      expireDate?: string;
      currentPrice?: components['schemas']['v1MoneyValue'];
      averagePositionPriceFifo?: components['schemas']['v1MoneyValue'];
    };
    /** @description Запрос доступного для вывода остатка. */
    v1WithdrawLimitsRequest: {
      accountId?: string;
    };
    /**
     * @description Доступный для вывода остаток.
     * @example {
     *   "blockedGuarantee": [
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   ],
     *   "money": [
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   ],
     *   "blocked": [
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     },
     *     {
     *       "nano": 5,
     *       "currency": "currency",
     *       "units": "units"
     *     }
     *   ]
     * }
     */
    v1WithdrawLimitsResponse: {
      money?: components['schemas']['v1MoneyValue'][];
      blocked?: components['schemas']['v1MoneyValue'][];
      blockedGuarantee?: components['schemas']['v1MoneyValue'][];
    };
    /**
     * Stream result of v1MarketDataResponse
     * @example {
     *   "result": {
     *     "subscribeInfoResponse": {
     *       "infoSubscriptions": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "trackingId": "trackingId"
     *     },
     *     "trade": {
     *       "quantity": "quantity",
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     "subscribeOrderBookResponse": {
     *       "orderBookSubscriptions": [
     *         {
     *           "depth": 0,
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "depth": 0,
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "trackingId": "trackingId"
     *     },
     *     "ping": {
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     "candle": {
     *       "volume": "volume",
     *       "high": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "lastTradeTs": "2000-01-23T04:56:07.000Z",
     *       "low": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z",
     *       "close": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "open": {
     *         "nano": 6,
     *         "units": "units"
     *       }
     *     },
     *     "orderbook": {
     *       "depth": 6,
     *       "asks": [
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         },
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         }
     *       ],
     *       "instrumentUid": "instrumentUid",
     *       "bids": [
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         },
     *         {
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         }
     *       ],
     *       "limitUp": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z",
     *       "limitDown": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "isConsistent": true
     *     },
     *     "subscribeTradesResponse": {
     *       "tradeSubscriptions": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "trackingId": "trackingId"
     *     },
     *     "tradingStatus": {
     *       "limitOrderAvailableFlag": true,
     *       "marketOrderAvailableFlag": true,
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     "subscribeCandlesResponse": {
     *       "candlesSubscriptions": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "trackingId": "trackingId"
     *     },
     *     "subscribeLastPriceResponse": {
     *       "lastPriceSubscriptions": [
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "instrumentUid": "instrumentUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "trackingId": "trackingId"
     *     },
     *     "lastPrice": {
     *       "price": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "instrumentUid": "instrumentUid",
     *       "figi": "figi",
     *       "time": "2000-01-23T04:56:07.000Z"
     *     }
     *   },
     *   "error": {
     *     "code": 1,
     *     "details": [
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       },
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       }
     *     ],
     *     "message": "message"
     *   }
     * }
     */
    Stream_result_of_v1MarketDataResponse: {
      result?: components['schemas']['v1MarketDataResponse'];
      error?: components['schemas']['rpcStatus'];
    };
    /**
     * Stream result of v1PortfolioStreamResponse
     * @example {
     *   "result": {
     *     "subscriptions": {
     *       "accounts": [
     *         {
     *           "accountId": "accountId"
     *         },
     *         {
     *           "accountId": "accountId"
     *         }
     *       ]
     *     },
     *     "portfolio": {
     *       "totalAmountBonds": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "totalAmountFutures": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "accountId": "accountId",
     *       "totalAmountCurrencies": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "totalAmountSp": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "expectedYield": {
     *         "nano": 6,
     *         "units": "units"
     *       },
     *       "positions": [
     *         {
     *           "varMargin": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentType": "instrumentType",
     *           "quantity": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPricePt": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expectedYieldFifo": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPriceFifo": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "currentPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "quantityLots": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "blockedLots": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "blocked": true,
     *           "instrumentUid": "instrumentUid",
     *           "currentNkd": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "expectedYield": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         },
     *         {
     *           "varMargin": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentType": "instrumentType",
     *           "quantity": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPricePt": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expectedYieldFifo": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPriceFifo": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "currentPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "quantityLots": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "blockedLots": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "blocked": true,
     *           "instrumentUid": "instrumentUid",
     *           "currentNkd": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "expectedYield": {
     *             "nano": 6,
     *             "units": "units"
     *           }
     *         }
     *       ],
     *       "totalAmountShares": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "totalAmountEtf": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "totalAmountPortfolio": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       },
     *       "virtualPositions": [
     *         {
     *           "averagePositionPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentType": "instrumentType",
     *           "quantity": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expectedYieldFifo": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPriceFifo": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "currentPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "figi": "figi",
     *           "expectedYield": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expireDate": "2000-01-23T04:56:07.000Z"
     *         },
     *         {
     *           "averagePositionPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentType": "instrumentType",
     *           "quantity": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expectedYieldFifo": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "averagePositionPriceFifo": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "currentPrice": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "figi": "figi",
     *           "expectedYield": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "expireDate": "2000-01-23T04:56:07.000Z"
     *         }
     *       ],
     *       "totalAmountOptions": {
     *         "nano": 5,
     *         "currency": "currency",
     *         "units": "units"
     *       }
     *     },
     *     "ping": {
     *       "time": "2000-01-23T04:56:07.000Z"
     *     }
     *   },
     *   "error": {
     *     "code": 1,
     *     "details": [
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       },
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       }
     *     ],
     *     "message": "message"
     *   }
     * }
     */
    Stream_result_of_v1PortfolioStreamResponse: {
      result?: components['schemas']['v1PortfolioStreamResponse'];
      error?: components['schemas']['rpcStatus'];
    };
    /**
     * Stream result of v1PositionsStreamResponse
     * @example {
     *   "result": {
     *     "subscriptions": {
     *       "accounts": [
     *         {
     *           "accountId": "accountId"
     *         },
     *         {
     *           "accountId": "accountId"
     *         }
     *       ]
     *     },
     *     "ping": {
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     "position": {
     *       "date": "2000-01-23T04:56:07.000Z",
     *       "accountId": "accountId",
     *       "money": [
     *         {
     *           "availableValue": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "blockedValue": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           }
     *         },
     *         {
     *           "availableValue": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           },
     *           "blockedValue": {
     *             "nano": 5,
     *             "currency": "currency",
     *             "units": "units"
     *           }
     *         }
     *       ],
     *       "options": [
     *         {
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid"
     *         },
     *         {
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid"
     *         }
     *       ],
     *       "futures": [
     *         {
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "figi": "figi"
     *         },
     *         {
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "figi": "figi"
     *         }
     *       ],
     *       "securities": [
     *         {
     *           "instrumentType": "instrumentType",
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "exchangeBlocked": true
     *         },
     *         {
     *           "instrumentType": "instrumentType",
     *           "blocked": "blocked",
     *           "balance": "balance",
     *           "instrumentUid": "instrumentUid",
     *           "positionUid": "positionUid",
     *           "figi": "figi",
     *           "exchangeBlocked": true
     *         }
     *       ]
     *     }
     *   },
     *   "error": {
     *     "code": 1,
     *     "details": [
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       },
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       }
     *     ],
     *     "message": "message"
     *   }
     * }
     */
    Stream_result_of_v1PositionsStreamResponse: {
      result?: components['schemas']['v1PositionsStreamResponse'];
      error?: components['schemas']['rpcStatus'];
    };
    /**
     * Stream result of v1TradesStreamResponse
     * @example {
     *   "result": {
     *     "ping": {
     *       "time": "2000-01-23T04:56:07.000Z"
     *     },
     *     "orderTrades": {
     *       "createdAt": "2000-01-23T04:56:07.000Z",
     *       "accountId": "accountId",
     *       "orderId": "orderId",
     *       "instrumentUid": "instrumentUid",
     *       "trades": [
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         },
     *         {
     *           "dateTime": "2000-01-23T04:56:07.000Z",
     *           "quantity": "quantity",
     *           "price": {
     *             "nano": 6,
     *             "units": "units"
     *           },
     *           "tradeId": "tradeId"
     *         }
     *       ],
     *       "figi": "figi"
     *     }
     *   },
     *   "error": {
     *     "code": 1,
     *     "details": [
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       },
     *       {
     *         "typeUrl": "typeUrl",
     *         "value": "value"
     *       }
     *     ],
     *     "message": "message"
     *   }
     * }
     */
    Stream_result_of_v1TradesStreamResponse: {
      result?: components['schemas']['v1TradesStreamResponse'];
      error?: components['schemas']['rpcStatus'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Метод получения облигации по её идентификатору. */
  InstrumentsService_BondBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1BondResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка облигаций. */
  InstrumentsService_Bonds: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1BondsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка валют. */
  InstrumentsService_Currencies: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CurrenciesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения валюты по её идентификатору. */
  InstrumentsService_CurrencyBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CurrencyResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод редактирования списка избранных инструментов. */
  InstrumentsService_EditFavorites: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1EditFavoritesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1EditFavoritesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения инвестиционного фонда по его идентификатору. */
  InstrumentsService_EtfBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1EtfResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка инвестиционных фондов. */
  InstrumentsService_Etfs: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1EtfsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод поиска инструмента. */
  InstrumentsService_FindInstrument: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1FindInstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1FindInstrumentResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения фьючерса по его идентификатору. */
  InstrumentsService_FutureBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1FutureResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка фьючерсов. */
  InstrumentsService_Futures: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1FuturesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения накопленного купонного дохода по облигации. */
  InstrumentsService_GetAccruedInterests: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetAccruedInterestsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetAccruedInterestsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения актива по его идентификатору. */
  InstrumentsService_GetAssetBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1AssetRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1AssetResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка активов. */
  InstrumentsService_GetAssets: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1AssetsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1AssetsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения графика выплат купонов по облигации. */
  InstrumentsService_GetBondCoupons: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetBondCouponsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetBondCouponsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения бренда по его идентификатору. */
  InstrumentsService_GetBrandBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetBrandRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1Brand'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка брендов. */
  InstrumentsService_GetBrands: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetBrandsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetBrandsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка стран. */
  InstrumentsService_GetCountries: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetCountriesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetCountriesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод для получения событий выплаты дивидендов по инструменту. */
  InstrumentsService_GetDividends: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetDividendsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetDividendsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка избранных инструментов. */
  InstrumentsService_GetFavorites: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetFavoritesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetFavoritesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения размера гарантийного обеспечения по фьючерсам. */
  InstrumentsService_GetFuturesMargin: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetFuturesMarginRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetFuturesMarginResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения основной информации об инструменте. */
  InstrumentsService_GetInstrumentBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1InstrumentResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения опциона по его идентификатору. */
  InstrumentsService_OptionBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OptionResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Deprecated Метод получения списка опционов. */
  InstrumentsService_Options: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OptionsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка опционов. */
  InstrumentsService_OptionsBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1FilterOptionsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OptionsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения акции по её идентификатору. */
  InstrumentsService_ShareBy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1ShareResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка акций. */
  InstrumentsService_Shares: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1InstrumentsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1SharesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения расписания торгов торговых площадок. */
  InstrumentsService_TradingSchedules: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1TradingSchedulesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1TradingSchedulesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса исторических свечей по инструменту. */
  MarketDataService_GetCandles: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetCandlesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetCandlesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса цен закрытия торговой сессии по инструментам. */
  MarketDataService_GetClosePrices: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetClosePricesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetClosePricesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса цен последних сделок по инструментам. */
  MarketDataService_GetLastPrices: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetLastPricesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetLastPricesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса обезличенных сделок за последний час. */
  MarketDataService_GetLastTrades: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetLastTradesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetLastTradesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения стакана по инструменту. */
  MarketDataService_GetOrderBook: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOrderBookRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOrderBookResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса статуса торгов по инструментам. */
  MarketDataService_GetTradingStatus: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetTradingStatusRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetTradingStatusResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод запроса статуса торгов по инструментам. */
  MarketDataService_GetTradingStatuses: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetTradingStatusesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetTradingStatusesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Server-side стрим предоставления биржевой информации. */
  MarketDataStreamService_MarketDataServerSideStream: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1MarketDataServerSideStreamRequest'];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          'application/json': components['schemas']['Stream_result_of_v1MarketDataResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Bi-directional стрим предоставления биржевой информации. */
  MarketDataStreamService_MarketDataStream: {
    /** @description  (streaming inputs) */
    requestBody: {
      content: {
        'application/json': components['schemas']['v1MarketDataRequest'];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          'application/json': components['schemas']['Stream_result_of_v1MarketDataResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения брокерского отчёта. */
  OperationsService_GetBrokerReport: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1BrokerReportRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1BrokerReportResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения отчёта "Справка о доходах за пределами РФ". */
  OperationsService_GetDividendsForeignIssuer: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetDividendsForeignIssuerRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetDividendsForeignIssuerResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /**
   * Метод получения списка операций по счёту.При работе с данным методом необходимо учитывать
   * [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
   */
  OperationsService_GetOperations: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1OperationsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OperationsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /**
   * Метод получения списка операций по счёту с пагинацией. При работе с данным методом необходимо учитывать
   * [особенности взаимодействия](/investAPI/operations_problems) с данным методом.
   */
  OperationsService_GetOperationsByCursor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOperationsByCursorRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOperationsByCursorResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения портфеля по счёту. */
  OperationsService_GetPortfolio: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PortfolioRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PortfolioResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка позиций по счёту. */
  OperationsService_GetPositions: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PositionsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PositionsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения доступного остатка для вывода средств. */
  OperationsService_GetWithdrawLimits: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1WithdrawLimitsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1WithdrawLimitsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Server-side stream обновлений портфеля */
  OperationsStreamService_PortfolioStream: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PortfolioStreamRequest'];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          'application/json': components['schemas']['Stream_result_of_v1PortfolioStreamResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Server-side stream обновлений информации по изменению позиций портфеля */
  OperationsStreamService_PositionsStream: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PositionsStreamRequest'];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          'application/json': components['schemas']['Stream_result_of_v1PositionsStreamResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод отмены биржевой заявки. */
  OrdersService_CancelOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CancelOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CancelOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения статуса торгового поручения. */
  OrdersService_GetOrderState: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOrderStateRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OrderState'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка активных заявок по счёту. */
  OrdersService_GetOrders: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOrdersRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOrdersResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод выставления заявки. */
  OrdersService_PostOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PostOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PostOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод изменения выставленной заявки. */
  OrdersService_ReplaceOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1ReplaceOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PostOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Stream сделок пользователя */
  OrdersStreamService_TradesStream: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1TradesStreamRequest'];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          'application/json': components['schemas']['Stream_result_of_v1TradesStreamResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод отмены торгового поручения в песочнице. */
  SandboxService_CancelSandboxOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CancelOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CancelOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод закрытия счёта в песочнице. */
  SandboxService_CloseSandboxAccount: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CloseSandboxAccountRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CloseSandboxAccountResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения счетов в песочнице. */
  SandboxService_GetSandboxAccounts: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetAccountsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetAccountsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения операций в песочнице по номеру счёта. */
  SandboxService_GetSandboxOperations: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1OperationsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OperationsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения операций в песочнице по номеру счета с пагинацией. */
  SandboxService_GetSandboxOperationsByCursor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOperationsByCursorRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOperationsByCursorResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения статуса заявки в песочнице. */
  SandboxService_GetSandboxOrderState: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOrderStateRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OrderState'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка активных заявок по счёту в песочнице. */
  SandboxService_GetSandboxOrders: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetOrdersRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetOrdersResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения портфолио в песочнице. */
  SandboxService_GetSandboxPortfolio: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PortfolioRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PortfolioResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения позиций по виртуальному счёту песочницы. */
  SandboxService_GetSandboxPositions: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PositionsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PositionsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения доступного остатка для вывода средств в песочнице. */
  SandboxService_GetSandboxWithdrawLimits: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1WithdrawLimitsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1WithdrawLimitsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод регистрации счёта в песочнице. */
  SandboxService_OpenSandboxAccount: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1OpenSandboxAccountRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1OpenSandboxAccountResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод выставления торгового поручения в песочнице. */
  SandboxService_PostSandboxOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PostOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PostOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод изменения выставленной заявки. */
  SandboxService_ReplaceSandboxOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1ReplaceOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PostOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод пополнения счёта в песочнице. */
  SandboxService_SandboxPayIn: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1SandboxPayInRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1SandboxPayInResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод отмены стоп-заявки. */
  StopOrdersService_CancelStopOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1CancelStopOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1CancelStopOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения списка активных стоп заявок по счёту. */
  StopOrdersService_GetStopOrders: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetStopOrdersRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetStopOrdersResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод выставления стоп-заявки. */
  StopOrdersService_PostStopOrder: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1PostStopOrderRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1PostStopOrderResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения счетов пользователя. */
  UsersService_GetAccounts: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetAccountsRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetAccountsResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Метод получения информации о пользователе. */
  UsersService_GetInfo: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetInfoRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetInfoResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Расчёт маржинальных показателей по счёту. */
  UsersService_GetMarginAttributes: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetMarginAttributesRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetMarginAttributesResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
  /** Запрос тарифа пользователя. */
  UsersService_GetUserTariff: {
    requestBody: {
      content: {
        'application/json': components['schemas']['v1GetUserTariffRequest'];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          'application/json': components['schemas']['v1GetUserTariffResponse'];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          'application/json': components['schemas']['rpcStatus'];
        };
      };
    };
  };
}
